{
    "docs": [
        {
            "location": "/", 
            "text": "React Native Elements\n\n\n\n\n\n  Cross Platform \nReact Native\n UI Toolkit\n\n\n\n\n\n  \n\n  \n\n  \n\n  \n\n\n\n\n\n\n\n\n\nGet Started\n\n\nInstallation\n\n\n\n\n\n\nIf you are using\n\ncreate-react-native-app\n\nor \nExpo\n, \nfollow these instructions\n.\n\n\n\n\n\n\nIf your project is a standard React Native project (if you have an\nios/android directory and created it with \nreact-native init\n), \nfollow these installation instructions\n.\n\n\n\n\n\n\nUsage\n\n\nStart using the components:\n\n\nimport\n \n{\n \nButton\n \n}\n \nfrom\n \nreact-native-elements\n;\n\n\n\nButton\n\n  \nraised\n\n  \nicon\n=\n{{\nname\n:\n \nhome\n,\n \nsize\n:\n \n32\n}}\n\n  \nbuttonStyle\n=\n{{\nbackgroundColor\n:\n \nred\n,\n \nborderRadius\n:\n \n10\n}}\n\n  \ntextStyle\n=\n{{\ntextAlign\n:\n \ncenter\n}}\n\n  \ntitle\n=\n{\n`Welcome to\n\\\nnReact Native Elements`\n}\n \n/\n\n\n\n\n\n\nComponents Included\n\n\n\n\n \nButtons\n\n\n \nSocial Icons / Buttons\n\n\n \nIcons\n\n\n \nSide Menu\n\n\n \nForm Elements\n\n\n \nSearch Bar\n\n\n \nButtonGroup\n\n\n \nCheckboxes\n\n\n \nList Element\n\n\n \nLinked List Element\n\n\n \nTab Bar Component\n\n\n \nHTML style headings (h1, h2, etc...)\n\n\n \nCard component\n\n\n \nPricing Component\n\n\n \nGrid Component\n\n\n \nSlider Component\n\n\n \nTile Component\n\n\n \nAvatar Component\n\n\n\n\nDemo App\n\n\nCheck out the pre built and configured \nReact Native Hackathon Starter Project\n which uses all of these elements.\n\n\nRoadmap\n\n\nIN PROGRESS\n\n\nFIRST CONTRIBUTORS\n\n\n\n\n \nAdd Profile Component\n\n\n \nAdd Header Component\n\n\n \nAdd Badge Component\n\n\n Refactor Social Icon to use Button\n\n\n\n\nNOT STARTED\n\n\n\n\n \nFloating labels on FormInput\n\n\n \nCompatibility with react-native-web\n\n\n \nSupport Multiple FormInput refs\n\n\n \nTwo-Marker Slider\n\n\n \nAdd Notification Component\n\n\n \nAdd Image Component which supports parallax\n\n\n \nAdd DatePicker/Calendar Component\n\n\n \nAdd Theming \n Default Styles\n\n\n Something you's like to see? Submit an \nissue\n or a \npull request\n\n\n\n\nNotes\n\n\nFonts\n\n\nReact Native Elements uses the System font as the default font family for iOS and Sans Serif as the default font family for Android.\n\n\nIn the example screenshots, we are using Lato which can be downloaded. \nhere\n.\n\n\n\n\nWe are working on a way to make a custom font family configurable through the command line.\n\n\n\n\nHere\n is a list of fonts available out of the box for each platform, or you can install and use a custom font of your own.\n\n\nTo override the fontFamily in any element, simply provide a fontFamily prop:\n\n\nButton\n\n  \nraised\n\n  \nicon\n=\n{{\nname\n:\n \ncached\n}}\n\n  \ntitle\n=\nRAISED WITH ICON\n\n  \nfontFamily\n=\nComic Sans MS\n \n/\n\n\n\n\n\n\nContributing\n\n\nInterested in contributing to this repo? Have a look at our \nContributing Guide\n\n\nBackers\n\n\nSupport us with a monthly donation and help us continue our activities. [\nBecome a backer\n]\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSponsors\n\n\nBecome a sponsor and get your logo on our README on Github with a link to your site. [\nBecome a sponsor\n]", 
            "title": "Home"
        }, 
        {
            "location": "/#get-started", 
            "text": "", 
            "title": "Get Started"
        }, 
        {
            "location": "/#installation", 
            "text": "If you are using create-react-native-app \nor  Expo ,  follow these instructions .    If your project is a standard React Native project (if you have an\nios/android directory and created it with  react-native init ),  follow these installation instructions .", 
            "title": "Installation"
        }, 
        {
            "location": "/#usage", 
            "text": "Start using the components:  import   {   Button   }   from   react-native-elements ;  Button \n   raised \n   icon = {{ name :   home ,   size :   32 }} \n   buttonStyle = {{ backgroundColor :   red ,   borderRadius :   10 }} \n   textStyle = {{ textAlign :   center }} \n   title = { `Welcome to \\ nReact Native Elements` }   /", 
            "title": "Usage"
        }, 
        {
            "location": "/#components-included", 
            "text": "Buttons    Social Icons / Buttons    Icons    Side Menu    Form Elements    Search Bar    ButtonGroup    Checkboxes    List Element    Linked List Element    Tab Bar Component    HTML style headings (h1, h2, etc...)    Card component    Pricing Component    Grid Component    Slider Component    Tile Component    Avatar Component", 
            "title": "Components Included"
        }, 
        {
            "location": "/#demo-app", 
            "text": "Check out the pre built and configured  React Native Hackathon Starter Project  which uses all of these elements.", 
            "title": "Demo App"
        }, 
        {
            "location": "/#roadmap", 
            "text": "", 
            "title": "Roadmap"
        }, 
        {
            "location": "/#in-progress", 
            "text": "", 
            "title": "IN PROGRESS"
        }, 
        {
            "location": "/#first-contributors", 
            "text": "Add Profile Component    Add Header Component    Add Badge Component   Refactor Social Icon to use Button", 
            "title": "FIRST CONTRIBUTORS"
        }, 
        {
            "location": "/#not-started", 
            "text": "Floating labels on FormInput    Compatibility with react-native-web    Support Multiple FormInput refs    Two-Marker Slider    Add Notification Component    Add Image Component which supports parallax    Add DatePicker/Calendar Component    Add Theming   Default Styles   Something you's like to see? Submit an  issue  or a  pull request", 
            "title": "NOT STARTED"
        }, 
        {
            "location": "/#notes", 
            "text": "", 
            "title": "Notes"
        }, 
        {
            "location": "/#fonts", 
            "text": "React Native Elements uses the System font as the default font family for iOS and Sans Serif as the default font family for Android.  In the example screenshots, we are using Lato which can be downloaded.  here .   We are working on a way to make a custom font family configurable through the command line.   Here  is a list of fonts available out of the box for each platform, or you can install and use a custom font of your own.  To override the fontFamily in any element, simply provide a fontFamily prop:  Button \n   raised \n   icon = {{ name :   cached }} \n   title = RAISED WITH ICON \n   fontFamily = Comic Sans MS   /", 
            "title": "Fonts"
        }, 
        {
            "location": "/#contributing", 
            "text": "Interested in contributing to this repo? Have a look at our  Contributing Guide", 
            "title": "Contributing"
        }, 
        {
            "location": "/#backers", 
            "text": "Support us with a monthly donation and help us continue our activities. [ Become a backer ]", 
            "title": "Backers"
        }, 
        {
            "location": "/#sponsors", 
            "text": "Become a sponsor and get your logo on our README on Github with a link to your site. [ Become a sponsor ]", 
            "title": "Sponsors"
        }, 
        {
            "location": "/API/HTML_style_headings/", 
            "text": "Text\n \nh1\nHeading\n \n1\n/Text\n\n\nText\n \nh2\nHeading\n \n2\n/Text\n\n\nText\n \nh3\nHeading\n \n3\n/Text\n\n\nText\n \nh4\nHeading\n \n4\n/Text\n\n\n\n\n\n\nHeadings Props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nh1\n\n\nnone\n\n\nboolean\n\n\nfont size 40 (optional)\n\n\n\n\n\n\nh2\n\n\nnone\n\n\nboolean\n\n\nfont size 34 (optional)\n\n\n\n\n\n\nh3\n\n\nnone\n\n\nboolean\n\n\nfont size 28 (optional)\n\n\n\n\n\n\nh4\n\n\nnone\n\n\nboolean\n\n\nfont size 22 (optional)\n\n\n\n\n\n\nfontFamily\n\n\nnone\n\n\nstring\n\n\nfont family name (optional)\n\n\n\n\n\n\nstyle\n\n\nnone\n\n\nobject (style)\n\n\nadd additional styling for Text (optional)", 
            "title": "HTML style headings"
        }, 
        {
            "location": "/API/HTML_style_headings/#headings-props", 
            "text": "prop  default  type  description      h1  none  boolean  font size 40 (optional)    h2  none  boolean  font size 34 (optional)    h3  none  boolean  font size 28 (optional)    h4  none  boolean  font size 22 (optional)    fontFamily  none  string  font family name (optional)    style  none  object (style)  add additional styling for Text (optional)", 
            "title": "Headings Props"
        }, 
        {
            "location": "/API/avatar/", 
            "text": "Avatars\n\n\n\n\nAvatar\n\n  \nsmall\n\n  \nrounded\n\n  \nsource\n=\n{{\nuri\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\nAvatar\n\n  \nmedium\n\n  \nsource\n=\n{{\nuri\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/kfriedson/128.jpg\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\nAvatar\n\n  \nlarge\n\n  \nsource\n=\n{{\nuri\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/brynn/128.jpg\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\nAvatar\n\n  \nxlarge\n\n  \nrounded\n\n  \nsource\n=\n{{\nuri\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\n\n\n\n\nAvatar with initials\n\n\n\n\nAvatar\n\n  \nsmall\n\n  \nrounded\n\n  \ntitle\n=\nMT\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\nAvatar\n\n  \nmedium\n\n  \ntitle\n=\nBP\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\nAvatar\n\n  \nlarge\n\n  \ntitle\n=\nLW\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\nAvatar\n\n  \nxlarge\n\n  \nrounded\n\n  \ntitle\n=\nCR\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n\n/\n\n\n\n\n\n\nAvatar with icons\n\n\n\n\nAvatar\n\n  \nsmall\n\n  \nrounded\n\n  \nicon\n=\n{{\nname\n:\n \nuser\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n  \ncontainerStyle\n=\n{{\nflex\n:\n \n2\n,\n \nmarginLeft\n:\n \n20\n,\n \nmarginTop\n:\n \n115\n}}\n\n\n/\n\n\nAvatar\n\n  \nmedium\n\n  \noverlayContainerStyle\n=\n{{\nbackgroundColor\n:\n \nblue\n}}\n\n  \nicon\n=\n{{\nname\n:\n \nmeetup\n,\n \ncolor\n:\n \nred\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n  \ncontainerStyle\n=\n{{\nflex\n:\n \n3\n,\n \nmarginTop\n:\n \n100\n}}\n\n\n/\n\n\nAvatar\n\n  \nlarge\n\n  \nicon\n=\n{{\nname\n:\n \nrocket\n,\n \ncolor\n:\n \norange\n}}\n\n  \noverlayContainerStyle\n=\n{{\nbackgroundColor\n:\n \nwhite\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n  \ncontainerStyle\n=\n{{\nflex\n:\n \n4\n,\n \nmarginTop\n:\n \n75\n}}\n\n\n/\n\n\nAvatar\n\n  \nxlarge\n\n  \nrounded\n\n  \nicon\n=\n{{\nname\n:\n \nhome\n}}\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nWorks!\n)}\n\n  \nactiveOpacity\n=\n{\n0.7\n}\n\n  \ncontainerStyle\n=\n{{\nflex\n:\n \n5\n,\n \nmarginRight\n:\n \n60\n}}\n\n\n/\n\n\n\n\n\n\nAvatar Props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncomponent\n\n\nTouchableOpacity\n\n\nfunction\n\n\ncomponent for enclosing element (eg: TouchableHighlight, View, etc)\n\n\n\n\n\n\nwidth\n\n\n34\n\n\nnumber\n\n\nwidth for the Avatar\n\n\n\n\n\n\nheight\n\n\n34\n\n\nnumber\n\n\nheight for the Avatar\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\ncallback function when pressing component\n\n\n\n\n\n\nonLongPress\n\n\nnone\n\n\nfunction\n\n\ncallback function when long pressing component\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nstyling for outer container\n\n\n\n\n\n\nsource\n\n\nnone\n\n\nobject (image)\n\n\nimage source\n\n\n\n\n\n\navatarStyle\n\n\nnone\n\n\nobject (style)\n\n\nstyle for avatar image\n\n\n\n\n\n\nrounded\n\n\nfalse\n\n\nboolean\n\n\ndetermines the shape of avatar\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring\n\n\nrenders title in the avatar\n\n\n\n\n\n\ntitleStyle\n\n\nnone\n\n\nobject (style)\n\n\nstyle for the title\n\n\n\n\n\n\noverlayContainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nstyle for the view outside image or icon\n\n\n\n\n\n\nactiveOpacity\n\n\n0.2\n\n\nnumber\n\n\nopacity when pressed\n\n\n\n\n\n\nicon\n\n\nnone\n\n\nobject {name: string, color: string, size: number, type: string (default is font-awesome, or choose one of material-community, simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo), iconStyle: object(style)}\n\n\n\n\n\n\n\n\niconStyle\n\n\nnone\n\n\nobject (style)\n\n\nextra styling for icon component (optional)", 
            "title": "Avatar"
        }, 
        {
            "location": "/API/avatar/#avatars", 
            "text": "Avatar \n   small \n   rounded \n   source = {{ uri :   https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /  Avatar \n   medium \n   source = {{ uri :   https://s3.amazonaws.com/uifaces/faces/twitter/kfriedson/128.jpg }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /  Avatar \n   large \n   source = {{ uri :   https://s3.amazonaws.com/uifaces/faces/twitter/brynn/128.jpg }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /  Avatar \n   xlarge \n   rounded \n   source = {{ uri :   https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /", 
            "title": "Avatars"
        }, 
        {
            "location": "/API/avatar/#avatar-with-initials", 
            "text": "Avatar \n   small \n   rounded \n   title = MT \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /  Avatar \n   medium \n   title = BP \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /  Avatar \n   large \n   title = LW \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /  Avatar \n   xlarge \n   rounded \n   title = CR \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 }  /", 
            "title": "Avatar with initials"
        }, 
        {
            "location": "/API/avatar/#avatar-with-icons", 
            "text": "Avatar \n   small \n   rounded \n   icon = {{ name :   user }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 } \n   containerStyle = {{ flex :   2 ,   marginLeft :   20 ,   marginTop :   115 }}  /  Avatar \n   medium \n   overlayContainerStyle = {{ backgroundColor :   blue }} \n   icon = {{ name :   meetup ,   color :   red }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 } \n   containerStyle = {{ flex :   3 ,   marginTop :   100 }}  /  Avatar \n   large \n   icon = {{ name :   rocket ,   color :   orange }} \n   overlayContainerStyle = {{ backgroundColor :   white }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 } \n   containerStyle = {{ flex :   4 ,   marginTop :   75 }}  /  Avatar \n   xlarge \n   rounded \n   icon = {{ name :   home }} \n   onPress = {()   =   console . log ( Works! )} \n   activeOpacity = { 0.7 } \n   containerStyle = {{ flex :   5 ,   marginRight :   60 }}  /", 
            "title": "Avatar with icons"
        }, 
        {
            "location": "/API/avatar/#avatar-props", 
            "text": "prop  default  type  description      component  TouchableOpacity  function  component for enclosing element (eg: TouchableHighlight, View, etc)    width  34  number  width for the Avatar    height  34  number  height for the Avatar    onPress  none  function  callback function when pressing component    onLongPress  none  function  callback function when long pressing component    containerStyle  none  object (style)  styling for outer container    source  none  object (image)  image source    avatarStyle  none  object (style)  style for avatar image    rounded  false  boolean  determines the shape of avatar    title  none  string  renders title in the avatar    titleStyle  none  object (style)  style for the title    overlayContainerStyle  none  object (style)  style for the view outside image or icon    activeOpacity  0.2  number  opacity when pressed    icon  none  object {name: string, color: string, size: number, type: string (default is font-awesome, or choose one of material-community, simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo), iconStyle: object(style)}     iconStyle  none  object (style)  extra styling for icon component (optional)", 
            "title": "Avatar Props"
        }, 
        {
            "location": "/API/badge/", 
            "text": "Example badge usage\n\nListItem\n\n  \n...\n\n  \nbadge\n=\n{{\n \nvalue\n:\n \n3\n,\n \nbadgeTextStyle\n:\n \n{\n \ncolor\n:\n \norange\n \n},\n \nbadgeContainerStyle\n:\n \n{\n \nmarginTop\n:\n \n-\n20\n \n}\n \n}}\n\n\n/\n\n\n\nListItem\n\n  \n...\n\n  \nbadge\n=\n{{\n \nelement\n:\n \nMyCustomElement\n \n}}\n\n\n/\n\n\n\n\n\n\nBadge props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nbadge\n\n\nnone\n\n\nobject, accepts the following properties: value (string), badgeContainerStyle (object), badgeTextStyle (object). You can override the default badge by providing your own component with it's own styling by providing badge={{ element: \n }}\n\n\nadd a badge to the ListItem by using this prop", 
            "title": "Badge"
        }, 
        {
            "location": "/API/badge/#badge-props", 
            "text": "prop  default  type  description      badge  none  object, accepts the following properties: value (string), badgeContainerStyle (object), badgeTextStyle (object). You can override the default badge by providing your own component with it's own styling by providing badge={{ element:   }}  add a badge to the ListItem by using this prop", 
            "title": "Badge props"
        }, 
        {
            "location": "/API/button_group/", 
            "text": "Using strings\n\n\nconstructor\n \n()\n \n{\n\n  \nsuper\n()\n\n  \nthis\n.\nstate\n \n=\n \n{\n\n    \nselectedIndex\n:\n \n2\n\n  \n}\n\n  \nthis\n.\nupdateIndex\n \n=\n \nthis\n.\nupdateIndex\n.\nbind\n(\nthis\n)\n\n\n}\n\n\nupdateIndex\n \n(\nselectedIndex\n)\n \n{\n\n  \nthis\n.\nsetState\n({\nselectedIndex\n})\n\n\n}\n\n\n\nrender\n \n()\n \n{\n\n  \nconst\n \nbuttons\n \n=\n \n[\nHello\n,\n \nWorld\n,\n \nButtons\n]\n\n  \nconst\n \n{\n \nselectedIndex\n \n}\n \n=\n \nthis\n.\nstate\n\n  \nreturn\n \n(\n\n    \nButtonGroup\n\n      \nonPress\n=\n{\nthis\n.\nupdateIndex\n}\n\n      \nselectedIndex\n=\n{\nselectedIndex\n}\n\n      \nbuttons\n=\n{\nbuttons\n}\n\n      \ncontainerStyle\n=\n{{\nheight\n:\n \n100\n}}\n \n/\n\n  \n)\n\n\n}\n\n\n\n\n\n\nUsing components\n\n\nconstructor\n \n()\n \n{\n\n  \nsuper\n()\n\n  \nthis\n.\nstate\n \n=\n \n{\n\n    \nselectedIndex\n:\n \n2\n\n  \n}\n\n  \nthis\n.\nupdateIndex\n \n=\n \nthis\n.\nupdateIndex\n.\nbind\n(\nthis\n)\n\n\n}\n\n\nupdateIndex\n \n(\nselectedIndex\n)\n \n{\n\n  \nthis\n.\nsetState\n({\nselectedIndex\n})\n\n\n}\n\n\n\nconst\n \ncomponent1\n \n=\n \n()\n \n=\n \nText\nHello\n/Text\n\n\nconst\n \ncomponent2\n \n=\n \n()\n \n=\n \nText\nWorld\n/Text\n\n\nconst\n \ncomponent3\n \n=\n \n()\n \n=\n \nText\nButtonGroup\n/Text\n\n\n\nrender\n \n()\n \n{\n\n  \nconst\n \nbuttons\n \n=\n \n[{\n \nelement\n:\n \ncomponent1\n \n},\n \n{\n \nelement\n:\n \ncomponent2\n \n},\n \n{\n \nelement\n:\n \ncomponent3\n \n}]\n\n  \nconst\n \n{\n \nselectedIndex\n \n}\n \n=\n \nthis\n.\nstate\n\n  \nreturn\n \n(\n\n    \nButtonGroup\n\n      \nonPress\n=\n{\nthis\n.\nupdateIndex\n}\n\n      \nselectedIndex\n=\n{\nselectedIndex\n}\n\n      \nbuttons\n=\n{\nbuttons\n}\n\n      \ncontainerStyle\n=\n{{\nheight\n:\n \n100\n}}\n \n/\n\n  \n)\n\n\n}\n\n\n\n\n\n\nButtonGroup props\n\n\nThis component inherits \nall native TouchableHighlight and TouchableOpacity props that come with React Native TouchableHighlight or TouchableOpacity elements\n, along with the following:\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nselectedIndex\n\n\nnone\n\n\nnumber\n\n\ncurrent selected index of array of buttons (required)\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nmethod to update Button Group Index (required)\n\n\n\n\n\n\nbuttons\n\n\nnone\n\n\narray\n\n\narray of buttons for component (required), if returning a component, must be an object with { element: componentName }\n\n\n\n\n\n\ncomponent\n\n\nTouchableHighlight\n\n\nReact Native Component\n\n\nChoose other button component such as TouchableOpacity (optional)\n\n\n\n\n\n\ncontainerStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nspecify styling for main button container (optional)\n\n\n\n\n\n\nbuttonStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nspecify styling for button (optional)\n\n\n\n\n\n\nselectedBackgroundColor\n\n\nwhite\n\n\nstring\n\n\nspecify color for selected state of button (optional)\n\n\n\n\n\n\ntextStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nspecify specific styling for text (optional)\n\n\n\n\n\n\nselectedTextStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nspecify specific styling for text in the selected state (optional)\n\n\n\n\n\n\ninnerBorderStyle\n\n\ninherited styling\n\n\nobject { width, color }\n\n\nupdate the styling of the interior border of the list of buttons (optional)\n\n\n\n\n\n\nunderlayColor\n\n\nwhite\n\n\nstring\n\n\nspecify underlayColor for TouchableHighlight (optional)", 
            "title": "Button group"
        }, 
        {
            "location": "/API/button_group/#buttongroup-props", 
            "text": "", 
            "title": "ButtonGroup props"
        }, 
        {
            "location": "/API/button_group/#this-component-inherits-all-native-touchablehighlight-and-touchableopacity-props-that-come-with-react-native-touchablehighlight-or-touchableopacity-elements-along-with-the-following", 
            "text": "prop  default  type  description      selectedIndex  none  number  current selected index of array of buttons (required)    onPress  none  function  method to update Button Group Index (required)    buttons  none  array  array of buttons for component (required), if returning a component, must be an object with { element: componentName }    component  TouchableHighlight  React Native Component  Choose other button component such as TouchableOpacity (optional)    containerStyle  inherited styling  object (style)  specify styling for main button container (optional)    buttonStyle  inherited styling  object (style)  specify styling for button (optional)    selectedBackgroundColor  white  string  specify color for selected state of button (optional)    textStyle  inherited styling  object (style)  specify specific styling for text (optional)    selectedTextStyle  inherited styling  object (style)  specify specific styling for text in the selected state (optional)    innerBorderStyle  inherited styling  object { width, color }  update the styling of the interior border of the list of buttons (optional)    underlayColor  white  string  specify underlayColor for TouchableHighlight (optional)", 
            "title": "This component inherits all native TouchableHighlight and TouchableOpacity props that come with React Native TouchableHighlight or TouchableOpacity elements, along with the following:"
        }, 
        {
            "location": "/API/buttons/", 
            "text": "Buttons take a title and an optional \nmaterial icon name\n, as well as the props below.\n\n\n\n\nYou can override Material icons with one of the following: material-community, simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo by providing an icon.type as a prop.\n\n\n\n\n\n\nimport\n \n{\n \nButton\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nButton\n\n  \ntitle\n=\nBUTTON\n \n/\n\n\n\nButton\n\n  \nraised\n\n  \nicon\n=\n{{\nname\n:\n \ncached\n}}\n\n  \ntitle\n=\nBUTTON WITH ICON\n \n/\n\n\n\nButton\n\n  \nlarge\n\n  \niconRight\n\n  \nicon\n=\n{{\nname\n:\n \ncode\n}}\n\n  \ntitle\n=\nLARGE WITH RIGHT ICON\n \n/\n\n\n\nButton\n\n  \nlarge\n\n  \nicon\n=\n{{\nname\n:\n \nenvira\n,\n \ntype\n:\n \nfont-awesome\n}}\n\n  \ntitle\n=\nLARGE WITH RIGHT ICON\n \n/\n\n\n\nButton\n\n  \nlarge\n\n  \nicon\n=\n{{\nname\n:\n \nsquirrel\n,\n \ntype\n:\n \nocticon\n,\n \nbuttonStyle\n:\n \nstyles\n.\nsomeButtonStyle\n \n}}\n\n  \ntitle\n=\nOCTICON\n \n/\n\n\n\n\n\n\nButton props\n\n\n\n\nAlso recevies all TouchableWithoutFeedback props\n\n\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nComponent\n\n\nTouchableHighlight (iOS), TouchableNativeFeedback (android)\n\n\nReact Native Component\n\n\nSpecify other component such as TouchableOpacity or other (optional)\n\n\n\n\n\n\nbuttonStyle\n\n\nnone\n\n\nobject (style)\n\n\nadd additional styling for button component (optional)\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring\n\n\nbutton title (required)\n\n\n\n\n\n\nlarge\n\n\nfalse\n\n\nboolean\n\n\nmakes button large\n\n\n\n\n\n\nfontFamily\n\n\nSystem font (iOS), Sans Serif (android)\n\n\nstring\n\n\nspecify different font family\n\n\n\n\n\n\nfontWeight\n\n\nnone\n\n\nstring\n\n\nspecify font weight for title (optional)\n\n\n\n\n\n\niconRight\n\n\nfalse\n\n\nboolean\n\n\nmoves icon to right of title\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nonPress method (required)\n\n\n\n\n\n\nonLongPress\n\n\nnone\n\n\nfunction\n\n\nonLongPress method (optional)\n\n\n\n\n\n\nicon\n\n\n{color: 'white'}\n\n\nobject {name: string, color: string, size: number, type: string (default is material, or choose one of material-community, simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo), style: object(style)}\n\n\nicon configuration (optional)\n\n\n\n\n\n\nbackgroundColor\n\n\n#397af8\n\n\nstring (color)\n\n\nbackground color of button (optional)\n\n\n\n\n\n\nborderRadius\n\n\nnone\n\n\nnumber\n\n\nadds border radius to button (optional)\n\n\n\n\n\n\ncolor\n\n\nwhite\n\n\nstring(color)\n\n\nfont color (optional)\n\n\n\n\n\n\ntextStyle\n\n\nnone\n\n\nobject (style)\n\n\ntext styling (optional)\n\n\n\n\n\n\nfontSize\n\n\n18\n\n\nnumber\n\n\nfont size (optional)\n\n\n\n\n\n\nunderlayColor\n\n\ntransparent\n\n\nstring(color)\n\n\nunderlay color for button press (optional)\n\n\n\n\n\n\nraised\n\n\nfalse\n\n\nboolean\n\n\nflag to add raised button styling (optional)\n\n\n\n\n\n\ndisabled\n\n\nfalse\n\n\nboolean\n\n\nprop to indicate button is disabled (optional)\n\n\n\n\n\n\ndisabledStyle\n\n\nnone\n\n\nobject (style)\n\n\ndisabled button styling (optional)", 
            "title": "Buttons"
        }, 
        {
            "location": "/API/buttons/#button-props", 
            "text": "Also recevies all TouchableWithoutFeedback props      prop  default  type  description      Component  TouchableHighlight (iOS), TouchableNativeFeedback (android)  React Native Component  Specify other component such as TouchableOpacity or other (optional)    buttonStyle  none  object (style)  add additional styling for button component (optional)    title  none  string  button title (required)    large  false  boolean  makes button large    fontFamily  System font (iOS), Sans Serif (android)  string  specify different font family    fontWeight  none  string  specify font weight for title (optional)    iconRight  false  boolean  moves icon to right of title    onPress  none  function  onPress method (required)    onLongPress  none  function  onLongPress method (optional)    icon  {color: 'white'}  object {name: string, color: string, size: number, type: string (default is material, or choose one of material-community, simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo), style: object(style)}  icon configuration (optional)    backgroundColor  #397af8  string (color)  background color of button (optional)    borderRadius  none  number  adds border radius to button (optional)    color  white  string(color)  font color (optional)    textStyle  none  object (style)  text styling (optional)    fontSize  18  number  font size (optional)    underlayColor  transparent  string(color)  underlay color for button press (optional)    raised  false  boolean  flag to add raised button styling (optional)    disabled  false  boolean  prop to indicate button is disabled (optional)    disabledStyle  none  object (style)  disabled button styling (optional)", 
            "title": "Button props"
        }, 
        {
            "location": "/API/card/", 
            "text": "const\n \nusers\n \n=\n \n[\n\n \n{\n\n    \nname\n:\n \nbrynn\n,\n\n    \navatar\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/brynn/128.jpg\n\n \n},\n\n \n...\n \n// more users here\n\n\n]\n\n\n\nimport\n \n{\n \nText\n \n}\n \nfrom\n \nreact-native\n\n\nimport\n \n{\n \nCard\n,\n \nListItem\n,\n \nButton\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\n// implemented without image with header\n\n\nCard\n\n  \ntitle\n=\nCARD WITH DIVIDER\n\n  \n{\n\n    \nusers\n.\nmap\n((\nu\n,\n \ni\n)\n \n=\n \n{}\n\n  \n}\n\n\n/Card\n\n\n\n// implemented without image without header, using ListItem component\n\n \nCard\n \ncontainerStyle\n=\n{{\npadding\n:\n \n0\n}}\n \n\n  \n{\n\n    \nusers\n.\nmap\n((\nu\n,\n \ni\n)\n \n=\n \n{\n\n      \nreturn\n \n(\n\n        \nListItem\n\n          \nkey\n=\n{\ni\n}\n\n          \nroundAvatar\n\n          \ntitle\n=\n{\nu\n.\nname\n}\n\n          \navatar\n=\n{{\nuri\n:\nu\n.\navatar\n}}\n \n/\n\n\n      \n)\n\n    \n})\n\n  \n}\n\n\n/Card\n\n\n\n\n// implemented with Text and Button as children\n\n\nCard\n\n  \ntitle\n=\nHELLO WORLD\n\n  \nimage\n=\n{\nrequire\n(\n../images/pic2.jpg\n)}\n\n  \nText\n \nstyle\n=\n{{\nmarginBottom\n:\n \n10\n}}\n\n    \nThe\n \nidea\n \nwith\n \nReact\n \nNative\n \nElements\n \nis\n \nmore\n \nabout\n \ncomponent\n \nstructure\n \nthan\n \nactual\n \ndesign\n.\n\n  \n/Text\n\n  \nButton\n\n    \nicon\n=\n{{\nname\n:\n \ncode\n}}\n\n    \nbackgroundColor\n=\n#03A9F4\n\n    \nfontFamily\n=\nLato\n\n    \nbuttonStyle\n=\n{{\nborderRadius\n:\n \n0\n,\n \nmarginLeft\n:\n \n0\n,\n \nmarginRight\n:\n \n0\n,\n \nmarginBottom\n:\n \n0\n}}\n\n    \ntitle\n=\nVIEW NOW\n \n/\n\n\n/Card\n\n\n\n\n\n\nCard props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nflexDirection\n\n\ncolumn\n\n\nstring\n\n\nflex direction (row or column) (optional)\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nouter container style (optional)\n\n\n\n\n\n\nwrapperStyle\n\n\nnone\n\n\nobject (style)\n\n\ninner container style (optional)\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring\n\n\noptional card title (optional)\n\n\n\n\n\n\ntitleStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional title styling (if title provided) (optional)\n\n\n\n\n\n\ndividerStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional divider styling (if title provided) (optional)\n\n\n\n\n\n\nfontFamily\n\n\nSystem font bold (iOS), Sans Serif Bold (android)\n\n\nstring\n\n\nspecify different font family\n\n\n\n\n\n\nimageStyle\n\n\ninherited styling\n\n\nobject(style)\n\n\nspecify image styling if image is provided\n\n\n\n\n\n\nimageWrapperStyle\n\n\nnone\n\n\nobject(style)\n\n\nspecify styling for view surrounding image\n\n\n\n\n\n\nimage\n\n\nnone\n\n\nimage uri or require path\n\n\nadd an image as the heading with the image prop (optional)", 
            "title": "Card"
        }, 
        {
            "location": "/API/card/#card-props", 
            "text": "prop  default  type  description      flexDirection  column  string  flex direction (row or column) (optional)    containerStyle  none  object (style)  outer container style (optional)    wrapperStyle  none  object (style)  inner container style (optional)    title  none  string  optional card title (optional)    titleStyle  none  object (style)  additional title styling (if title provided) (optional)    dividerStyle  none  object (style)  additional divider styling (if title provided) (optional)    fontFamily  System font bold (iOS), Sans Serif Bold (android)  string  specify different font family    imageStyle  inherited styling  object(style)  specify image styling if image is provided    imageWrapperStyle  none  object(style)  specify styling for view surrounding image    image  none  image uri or require path  add an image as the heading with the image prop (optional)", 
            "title": "Card props"
        }, 
        {
            "location": "/API/checkbox/", 
            "text": "import\n \n{\n \nCheckBox\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nCheckBox\n\n  \ntitle\n=\nClick Here\n\n  \nchecked\n=\n{\nthis\n.\nstate\n.\nchecked\n}\n\n\n/\n\n\n\nCheckBox\n\n  \ncenter\n\n  \ntitle\n=\nClick Here\n\n  \nchecked\n=\n{\nthis\n.\nstate\n.\nchecked\n}\n\n\n/\n\n\n\nCheckBox\n\n  \ncenter\n\n  \ntitle\n=\nClick Here\n\n  \ncheckedIcon\n=\ndot-circle-o\n\n  \nuncheckedIcon\n=\ncircle-o\n\n  \nchecked\n=\n{\nthis\n.\nstate\n.\nchecked\n}\n\n\n/\n\n\n\nCheckBox\n\n  \ncenter\n\n  \ntitle\n=\nClick Here to Remove This Item\n\n  \niconRight\n\n  \niconType\n=\nmaterial\n\n  \ncheckedIcon\n=\nclear\n\n  \nuncheckedIcon\n=\nadd\n\n  \ncheckedColor\n=\nred\n\n  \nchecked\n=\n{\nthis\n.\nstate\n.\nchecked\n}\n\n\n/\n\n\n\n\n\n\nCheckbox props\n\n\n\n\nThis component uses FontAwesome icons out of the box. You can also specify one of the following types of icons by specifying an iconType prop: Simple Line Icon, Zocial, Octicons, MaterialIcons, MaterialCommunityIcons, Ionicons, Foundation, EvilIcons, or Entypo\n\n\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\niconType\n\n\nfontawesome\n\n\nstring\n\n\nicon family, can be one of the following: simple-line-icon, zocial, octicon, material, material-community, ionicon, foundation, evilicon, entypo (required only if specifying an icon that is not from font-awesome)\n\n\n\n\n\n\ncomponent\n\n\nTouchableOpacity\n\n\nReact Native Component\n\n\nspecify React Native component for main button (optional)\n\n\n\n\n\n\nchecked\n\n\nfalse\n\n\nboolean\n\n\nflag for checking the icon (required)\n\n\n\n\n\n\niconRight\n\n\nfalse\n\n\nboolean\n\n\nmoves icon to right of text (optional)\n\n\n\n\n\n\nright\n\n\nfalse\n\n\nboolean\n\n\naligns checkbox to right (optional)\n\n\n\n\n\n\ncenter\n\n\nfalse\n\n\nboolean\n\n\naligns checkbox to center (optional)\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring\n\n\ntitle of checkbox (required)\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nstyle of main container (optional)\n\n\n\n\n\n\ntextStyle\n\n\nnone\n\n\nobject (style)\n\n\nstyle of text (optional)\n\n\n\n\n\n\nonLongPress\n\n\nnone\n\n\nfunction\n\n\nonLongPress function for  checkbox (optional)\n\n\n\n\n\n\nonLongIconPress\n\n\nnone\n\n\nfunction\n\n\nonLongPress function for  checkbox (optional)\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nonPress function for container (optional)\n\n\n\n\n\n\nonIconPress\n\n\nnone\n\n\nfunction\n\n\nonPress function for checkbox (required)\n\n\n\n\n\n\ncheckedIcon\n\n\ncheck-square-o\n\n\nstring\n\n\ndefault checked icon (\nFont Awesome Icon\n) (optional)\n\n\n\n\n\n\nuncheckedIcon\n\n\nsquare-o\n\n\nstring\n\n\ndefault checked icon (\nFont Awesome Icon\n) (optional)\n\n\n\n\n\n\ncheckedColor\n\n\ngreen\n\n\nstring\n\n\ndefault checked color (optional)\n\n\n\n\n\n\nuncheckedColor\n\n\n#bfbfbf\n\n\nstring\n\n\ndefault unchecked color (optional)\n\n\n\n\n\n\ncheckedTitle\n\n\nnone\n\n\nstring\n\n\nspecify a custom checked message (optional)\n\n\n\n\n\n\nfontFamily\n\n\nSystem font bold (iOS), Sans Serif Bold (android)\n\n\nstring\n\n\nspecify different font family", 
            "title": "Checkbox"
        }, 
        {
            "location": "/API/checkbox/#checkbox-props", 
            "text": "This component uses FontAwesome icons out of the box. You can also specify one of the following types of icons by specifying an iconType prop: Simple Line Icon, Zocial, Octicons, MaterialIcons, MaterialCommunityIcons, Ionicons, Foundation, EvilIcons, or Entypo      prop  default  type  description      iconType  fontawesome  string  icon family, can be one of the following: simple-line-icon, zocial, octicon, material, material-community, ionicon, foundation, evilicon, entypo (required only if specifying an icon that is not from font-awesome)    component  TouchableOpacity  React Native Component  specify React Native component for main button (optional)    checked  false  boolean  flag for checking the icon (required)    iconRight  false  boolean  moves icon to right of text (optional)    right  false  boolean  aligns checkbox to right (optional)    center  false  boolean  aligns checkbox to center (optional)    title  none  string  title of checkbox (required)    containerStyle  none  object (style)  style of main container (optional)    textStyle  none  object (style)  style of text (optional)    onLongPress  none  function  onLongPress function for  checkbox (optional)    onLongIconPress  none  function  onLongPress function for  checkbox (optional)    onPress  none  function  onPress function for container (optional)    onIconPress  none  function  onPress function for checkbox (required)    checkedIcon  check-square-o  string  default checked icon ( Font Awesome Icon ) (optional)    uncheckedIcon  square-o  string  default checked icon ( Font Awesome Icon ) (optional)    checkedColor  green  string  default checked color (optional)    uncheckedColor  #bfbfbf  string  default unchecked color (optional)    checkedTitle  none  string  specify a custom checked message (optional)    fontFamily  System font bold (iOS), Sans Serif Bold (android)  string  specify different font family", 
            "title": "Checkbox props"
        }, 
        {
            "location": "/API/divider/", 
            "text": "Example divider usage\n\nDivider\n \nstyle\n=\n{{\n \nbackgroundColor\n:\n \nblue\n \n}}\n \n/\n\n\n\n\n\n\nBadge props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nstyle\n\n\n{height: 1, backgroundColor: #e1e8ee}\n\n\nstyle object\n\n\nstyle the divider", 
            "title": "Divider"
        }, 
        {
            "location": "/API/divider/#badge-props", 
            "text": "prop  default  type  description      style  {height: 1, backgroundColor: #e1e8ee}  style object  style the divider", 
            "title": "Badge props"
        }, 
        {
            "location": "/API/forms/", 
            "text": "import\n \n{\n \nFormLabel\n,\n \nFormInput\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nFormLabel\nName\n/FormLabel\n\n\nFormInput\n \nonChangeText\n=\n{\nsomeFunction\n}\n/\n\n\nFormValidationMessage\nError\n \nmessage\n/FormValidationMessage\n\n\n\n\n\n\nFormValidationMessage example\n\n\n\n\nFormInput props\n\n\nThis component inherits \nall native TextInput props that come with a standard React Native TextInput element\n, along with the following:\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nTextInput container styling (optional)\n\n\n\n\n\n\ninputStyle\n\n\nnone\n\n\nobject (style)\n\n\nTextInput styling (optional)\n\n\n\n\n\n\ntextInputRef\n\n\nnone\n\n\nref\n\n\nget ref of TextInput\n\n\n\n\n\n\ncontainerRef\n\n\nnone\n\n\nref\n\n\nget ref of TextInput container\n\n\n\n\n\n\nfocus\n\n\nnone\n\n\nfunction\n\n\ncall focus on the textinput(optional), eg \nthis.refs.someInputRef.focus()\n\n\n\n\n\n\n\n\nFormLabel props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional label container style (optional)\n\n\n\n\n\n\nlabelStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional label styling (optional)\n\n\n\n\n\n\nfontFamily\n\n\nSystem font bold (iOS), Sans Serif Bold (android)\n\n\nstring\n\n\nspecify different font family\n\n\n\n\n\n\n\n\nFormValidationMessage props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional label container style (optional)\n\n\n\n\n\n\nlabelStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional label styling (optional)\n\n\n\n\n\n\nfontFamily\n\n\nSystem font bold (iOS), Sans Serif Bold (android)\n\n\nstring\n\n\nspecify different font family\n\n\n\n\n\n\n\n\nUsing FormInput refs\n\n\nFormInput\n\n  \nref\n=\nforminput\n\n  \ntextInputRef\n=\nemail\n\n  \n...\n\n\n/\n\n\n\n\nYou should be able to access the refs like this\n\n\nthis.refs.forminput.refs.email", 
            "title": "Forms"
        }, 
        {
            "location": "/API/forms/#formvalidationmessage-example", 
            "text": "", 
            "title": "FormValidationMessage example"
        }, 
        {
            "location": "/API/forms/#forminput-props", 
            "text": "", 
            "title": "FormInput props"
        }, 
        {
            "location": "/API/forms/#this-component-inherits-all-native-textinput-props-that-come-with-a-standard-react-native-textinput-element-along-with-the-following", 
            "text": "prop  default  type  description      containerStyle  none  object (style)  TextInput container styling (optional)    inputStyle  none  object (style)  TextInput styling (optional)    textInputRef  none  ref  get ref of TextInput    containerRef  none  ref  get ref of TextInput container    focus  none  function  call focus on the textinput(optional), eg  this.refs.someInputRef.focus()", 
            "title": "This component inherits all native TextInput props that come with a standard React Native TextInput element, along with the following:"
        }, 
        {
            "location": "/API/forms/#formlabel-props", 
            "text": "prop  default  type  description      containerStyle  none  object (style)  additional label container style (optional)    labelStyle  none  object (style)  additional label styling (optional)    fontFamily  System font bold (iOS), Sans Serif Bold (android)  string  specify different font family", 
            "title": "FormLabel props"
        }, 
        {
            "location": "/API/forms/#formvalidationmessage-props", 
            "text": "prop  default  type  description      containerStyle  none  object (style)  additional label container style (optional)    labelStyle  none  object (style)  additional label styling (optional)    fontFamily  System font bold (iOS), Sans Serif Bold (android)  string  specify different font family", 
            "title": "FormValidationMessage props"
        }, 
        {
            "location": "/API/forms/#using-forminput-refs", 
            "text": "FormInput \n   ref = forminput \n   textInputRef = email \n   ...  /  \n\nYou should be able to access the refs like this  this.refs.forminput.refs.email", 
            "title": "Using FormInput refs"
        }, 
        {
            "location": "/API/grid/", 
            "text": "The Grid component provides two types of layouts, Row and Column. This provides you with an easy way to position your elements on screen without using flex directly.\n\n\n\n\nThis component was inspired from \nreact-native-easy-grid\n by \nGeekyAnts\n. Check out \nNativeBase.io\n if you haven't already!\n\n\n\n\nRow\n\n\n\n\nimport\n \n{\nGrid\n,\n \nRow\n}\n \nfrom\n \nreact-native-elements\n;\n\n\n\nGrid\n\n  \nRow\n/Row\n\n  \nRow\n/Row\n\n\n/Grid\n\n\n\n\n\n\nColumn\n\n\n\n\nimport\n \n{\nGrid\n,\n \nCol\n}\n \nfrom\n \nreact-native-elements\n;\n\n\n\nGrid\n\n  \nCol\n/Col\n\n  \nCol\n/Col\n\n\n/Grid\n\n\n\n\n\n\nCreating nested layout\n\n\n\n  \n\n    \n1\n\n    \n2\n\n  \n\n  \n\n    \n3\n\n  \n\n\n\n\n\n\n\nimport\n \n{\nGrid\n,\n \nCol\n,\n \nRow\n}\n \nfrom\n \nreact-native-elements\n;\n\n\n\nGrid\n\n  \nCol\n/Col\n\n  \nCol\n\n    \nRow\n/Row\n\n    \nRow\n/Row\n\n  \n/Col\n\n\n/Grid\n\n\n\n\n\n\nUsing the size prop\n\n\nA ratio can be passed to the Size Prop\n\n\n\n\nGrid\n\n  \nRow\n \nsize\n=\n{\n3\n}\n/Row\n\n  \nRow\n \nsize\n=\n{\n1\n}\n/Row\n\n\n/Grid\n\n\n\n\n\n\n\n\nGrid\n\n  \nCol\n \nsize\n=\n{\n75\n}\n/Col\n\n  \nCol\n \nsize\n=\n{\n25\n}\n/Col\n\n\n/Grid\n\n\n\n\n\n\nGridComponent Props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nOuter grid styling (optional)\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nonPress method (optional)\n\n\n\n\n\n\nactiveOpacity\n\n\n1\n\n\nnumber\n\n\nOpacity on pressing (optional)\n\n\n\n\n\n\n\n\nColComponent Props\n\n\n\n\n\n\n\n\nprops\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nStyling for the outer column (optional)\n\n\n\n\n\n\nsize\n\n\nnone\n\n\nnumber\n\n\nSize for column (optional)\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nonPress method (optional)\n\n\n\n\n\n\nactiveOpacity\n\n\n1\n\n\nnumber\n\n\nOpacity on pressing (optional)\n\n\n\n\n\n\n\n\nRowComponent Props\n\n\n\n\n\n\n\n\nprops\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nStyling for the outer column (optional)\n\n\n\n\n\n\nsize\n\n\nnone\n\n\nnumber\n\n\nSize for row (optional)\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nonPress method (optional)\n\n\n\n\n\n\nactiveOpacity\n\n\n1\n\n\nnumber\n\n\nOpacity on pressing (optional)", 
            "title": "Grid"
        }, 
        {
            "location": "/API/grid/#row", 
            "text": "import   { Grid ,   Row }   from   react-native-elements ;  Grid \n   Row /Row \n   Row /Row  /Grid", 
            "title": "Row"
        }, 
        {
            "location": "/API/grid/#column", 
            "text": "import   { Grid ,   Col }   from   react-native-elements ;  Grid \n   Col /Col \n   Col /Col  /Grid   Creating nested layout  \n   \n     1 \n     2 \n   \n   \n     3 \n      import   { Grid ,   Col ,   Row }   from   react-native-elements ;  Grid \n   Col /Col \n   Col \n     Row /Row \n     Row /Row \n   /Col  /Grid", 
            "title": "Column"
        }, 
        {
            "location": "/API/grid/#using-the-size-prop", 
            "text": "A ratio can be passed to the Size Prop   Grid \n   Row   size = { 3 } /Row \n   Row   size = { 1 } /Row  /Grid    Grid \n   Col   size = { 75 } /Col \n   Col   size = { 25 } /Col  /Grid", 
            "title": "Using the size prop"
        }, 
        {
            "location": "/API/grid/#gridcomponent-props", 
            "text": "prop  default  type  description      containerStyle  none  object (style)  Outer grid styling (optional)    onPress  none  function  onPress method (optional)    activeOpacity  1  number  Opacity on pressing (optional)", 
            "title": "GridComponent Props"
        }, 
        {
            "location": "/API/grid/#colcomponent-props", 
            "text": "props  default  type  description      containerStyle  none  object (style)  Styling for the outer column (optional)    size  none  number  Size for column (optional)    onPress  none  function  onPress method (optional)    activeOpacity  1  number  Opacity on pressing (optional)", 
            "title": "ColComponent Props"
        }, 
        {
            "location": "/API/grid/#rowcomponent-props", 
            "text": "props  default  type  description      containerStyle  none  object (style)  Styling for the outer column (optional)    size  none  number  Size for row (optional)    onPress  none  function  onPress method (optional)    activeOpacity  1  number  Opacity on pressing (optional)", 
            "title": "RowComponent Props"
        }, 
        {
            "location": "/API/icons/", 
            "text": "Icons take the name of a \nmaterial icon\n as a prop.\n\n\n\n\nYou can override Material icons with one of the following: \nmaterial-community\n, \nfont-awesome\n, \nocticon\n, \nionicon\n, \nfoundation\n, \nevilicon\n, \nsimple-line-icon\n, \nzocial\n, or \nentypo\n by providing a type prop.\n\n\nHint: use \nreverse\n to make your icon look like a button\n\n\n\n\nimport\n \n{\n \nIcon\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nIcon\n\n  \nname\n=\nrowing\n \n/\n\n\n\nIcon\n\n  \nname\n=\ng-translate\n\n  \ncolor\n=\n#00aced\n \n/\n\n\n\nIcon\n\n  \nname\n=\nsc-telegram\n\n  \ntype\n=\nevilicon\n\n  \ncolor\n=\n#517fa4\n\n\n/\n\n\n\nIcon\n\n  \nreverse\n\n  \nname\n=\nios-american-football\n\n  \ntype\n=\nionicon\n\n  \ncolor\n=\n#517fa4\n\n\n/\n\n\n\nIcon\n\n  \nraised\n\n  \nname\n=\nheartbeat\n\n  \ntype\n=\nfont-awesome\n\n  \ncolor\n=\n#f50\n\n  \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nhello\n)}\n \n/\n\n\n\n\n\n\nIcon props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nnone\n\n\nstring\n\n\nname of icon (required)\n\n\n\n\n\n\ntype\n\n\nmaterial\n\n\nstring\n\n\ntype (defaults to material, options are \nmaterial-community, zocial, font-awesome, octicon, ionicon, foundation, evilicon, simple-line-icon, or entypo\n)\n\n\n\n\n\n\nsize\n\n\n26\n\n\nnumber\n\n\nsize of icon (optional)\n\n\n\n\n\n\ncolor\n\n\nblack\n\n\nstring\n\n\ncolor of icon (optional)\n\n\n\n\n\n\niconStyle\n\n\ninherited style\n\n\nobject (style)\n\n\nadditional styling to icon (optional)\n\n\n\n\n\n\ncomponent\n\n\nView if no onPress method is defined, TouchableHighlight if onPress method is defined\n\n\nReact Native component\n\n\nupdate React Native Component (optional)\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nonPress method for button (optional)\n\n\n\n\n\n\nonLongPress\n\n\nnone\n\n\nfunction\n\n\nonLongPress method for button (optional)\n\n\n\n\n\n\nunderlayColor\n\n\nicon color\n\n\nstring\n\n\nunderlayColor for press event\n\n\n\n\n\n\nreverse\n\n\nfalse\n\n\nboolean\n\n\nreverses color scheme (optional)\n\n\n\n\n\n\nraised\n\n\nfalse\n\n\nboolean\n\n\nadds box shadow to button (optional)\n\n\n\n\n\n\ncontainerStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nadd styling to container holding icon (optional)\n\n\n\n\n\n\nreverseColor\n\n\nwhite\n\n\nstring\n\n\nspecify reverse icon color (optional)", 
            "title": "Icons"
        }, 
        {
            "location": "/API/icons/#icon-props", 
            "text": "prop  default  type  description      name  none  string  name of icon (required)    type  material  string  type (defaults to material, options are  material-community, zocial, font-awesome, octicon, ionicon, foundation, evilicon, simple-line-icon, or entypo )    size  26  number  size of icon (optional)    color  black  string  color of icon (optional)    iconStyle  inherited style  object (style)  additional styling to icon (optional)    component  View if no onPress method is defined, TouchableHighlight if onPress method is defined  React Native component  update React Native Component (optional)    onPress  none  function  onPress method for button (optional)    onLongPress  none  function  onLongPress method for button (optional)    underlayColor  icon color  string  underlayColor for press event    reverse  false  boolean  reverses color scheme (optional)    raised  false  boolean  adds box shadow to button (optional)    containerStyle  inherited styling  object (style)  add styling to container holding icon (optional)    reverseColor  white  string  specify reverse icon color (optional)", 
            "title": "Icon props"
        }, 
        {
            "location": "/API/lists/", 
            "text": "Using Map Function. Implemented with avatar.\n\n\nimport\n \n{\n \nList\n,\n \nListItem\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nconst\n \nlist\n \n=\n \n[\n\n  \n{\n\n    \nname\n:\n \nAmy Farha\n,\n\n    \navatar_url\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg\n,\n\n    \nsubtitle\n:\n \nVice President\n\n  \n},\n\n  \n{\n\n    \nname\n:\n \nChris Jackson\n,\n\n    \navatar_url\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg\n,\n\n    \nsubtitle\n:\n \nVice Chairman\n\n  \n},\n\n  \n...\n \n// more items\n\n\n]\n\n\n\nList\n \ncontainerStyle\n=\n{{\nmarginBottom\n:\n \n20\n}}\n\n  \n{\n\n    \nlist\n.\nmap\n((\nl\n,\n \ni\n)\n \n=\n \n(\n\n      \nListItem\n\n        \nroundAvatar\n\n        \navatar\n=\n{{\nuri\n:\nl\n.\navatar_url\n}}\n\n        \nkey\n=\n{\ni\n}\n\n        \ntitle\n=\n{\nl\n.\nname\n}\n\n      \n/\n\n    \n))\n\n  \n}\n\n\n/List\n\n\n\n\n\n\nUsing Map Function. Implemented with link and icon.\n\n\nimport\n \n{\n \nList\n,\n \nListItem\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nconst\n \nlist\n \n=\n \n[\n\n  \n{\n\n    \ntitle\n:\n \nAppointments\n,\n\n    \nicon\n:\n \nav-timer\n\n  \n},\n\n  \n{\n\n    \ntitle\n:\n \nTrips\n,\n\n    \nicon\n:\n \nflight-takeoff\n\n  \n},\n\n  \n...\n \n// more items\n\n\n]\n\n\n\nList\n\n  \n{\n\n    \nlist\n.\nmap\n((\nitem\n,\n \ni\n)\n \n=\n \n(\n\n      \nListItem\n\n        \nkey\n=\n{\ni\n}\n\n        \ntitle\n=\n{\nitem\n.\ntitle\n}\n\n        \nleftIcon\n=\n{{\nname\n:\n \nitem\n.\nicon\n}}\n\n      \n/\n\n    \n))\n\n  \n}\n\n\n/List\n\n\n\n\n\n\nUsing RN ListView. Implemented with link and avatar.\n\n\nimport\n \n{\n \nList\n,\n \nListItem\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nconst\n \nlist\n \n=\n \n[\n\n  \n{\n\n    \nname\n:\n \nAmy Farha\n,\n\n    \navatar_url\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg\n,\n\n    \nsubtitle\n:\n \nVice President\n\n  \n},\n\n  \n{\n\n    \nname\n:\n \nChris Jackson\n,\n\n    \navatar_url\n:\n \nhttps://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg\n,\n\n    \nsubtitle\n:\n \nVice Chairman\n\n  \n},\n\n  \n...\n \n// more items\n\n\n]\n\n\n\nrenderRow\n \n(\nrowData\n,\n \nsectionID\n)\n \n{\n\n  \nreturn\n \n(\n\n    \nListItem\n\n      \nroundAvatar\n\n      \nkey\n=\n{\nsectionID\n}\n\n      \ntitle\n=\n{\nrowData\n.\nname\n}\n\n      \nsubtitle\n=\n{\nrowData\n.\nsubtitle\n}\n\n      \navatar\n=\n{{\nuri\n:\nrowData\n.\navatar_url\n}}\n\n    \n/\n\n  \n)\n\n\n}\n\n\n\nrender\n \n()\n \n{\n\n  \nreturn\n \n(\n\n    \nList\n\n      \nListView\n\n        \nrenderRow\n=\n{\nthis\n.\nrenderRow\n}\n\n        \ndataSource\n=\n{\nthis\n.\nstate\n.\ndataSource\n}\n\n      \n/\n\n    \n/List\n\n  \n)\n\n\n}\n\n\n\n\n\n\nListItem implemented with custom View for Subtitle\n\n\nimport\n \n{\n \nList\n,\n \nListItem\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nrender\n \n()\n \n{\n\n  \nreturn\n \n(\n\n    \nList\n\n      \nListItem\n\n        \nroundAvatar\n\n        \ntitle\n=\nLimited supply! Its like digital gold!\n\n        \nsubtitle\n=\n{\n\n          \nView\n \nstyle\n=\n{\nstyles\n.\nsubtitleView\n}\n\n            \nImage\n \nsource\n=\n{\nrequire\n(\n../images/rating.png\n)}\n \nstyle\n=\n{\nstyles\n.\nratingImage\n}\n/\n\n            \nText\n \nstyle\n=\n{\nstyles\n.\nratingText\n}\n5\n \nmonths\n \nago\n/Text\n\n          \n/View\n\n        \n}\n\n        \navatar\n=\n{\nrequire\n(\n../images/avatar1.jpg\n)}\n\n      \n/\n\n    \n/List\n\n  \n)\n\n\n}\n\n\n\nstyles\n \n=\n \nStyleSheet\n.\ncreate\n({\n\n  \nsubtitleView\n:\n \n{\n\n    \nflexDirection\n:\n \nrow\n,\n\n    \npaddingLeft\n:\n \n10\n,\n\n    \npaddingTop\n:\n \n5\n\n  \n},\n\n  \nratingImage\n:\n \n{\n\n    \nheight\n:\n \n19.21\n,\n\n    \nwidth\n:\n \n100\n\n  \n},\n\n  \nratingText\n:\n \n{\n\n    \npaddingLeft\n:\n \n10\n,\n\n    \ncolor\n:\n \ngrey\n\n  \n}\n\n\n})\n\n\n\n\n\n\nList Props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontainerStyle\n\n\nmarginTop: 20, borderTopWidth: 1, borderBottomWidth: 1, borderBottomColor: #cbd2d9\n\n\nobject (style)\n\n\nstyle the list container\n\n\n\n\n\n\n\n\nListItem props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\navatar\n\n\nnone\n\n\nobject\n\n\nleft avatar (optional). Refer to \nReact Native Image Source\n\n\n\n\n\n\navatarStyle\n\n\nnone\n\n\nobject (style)\n\n\navatar styling (optional)\n\n\n\n\n\n\nchevronColor\n\n\n#bdc6cf\n\n\nstring\n\n\nset chevron color\n\n\n\n\n\n\ncomponent\n\n\nView or TouchableHighlight if onPress method is added as prop\n\n\nReact Native element\n\n\nreplace element with custom element (optional)\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional main container styling (optional)\n\n\n\n\n\n\nhideChevron\n\n\nfalse\n\n\nboolean\n\n\nset if you do not want a chevron (optional)\n\n\n\n\n\n\nleftIcon\n\n\nnone\n\n\nobject {name, color, style, type} (type defaults to material icons)\n\n\nicon configuration for left icon (optional)\n\n\n\n\n\n\nrightIcon\n\n\n{name: 'chevron-right'}\n\n\nobject {name, color, style, type} (type defaults to material icons)\n\n\nicon configuration for right icon (optional). Shows up unless hideChevron is set\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nonPress method for link (optional)\n\n\n\n\n\n\nonLongPress\n\n\nnone\n\n\nfunction\n\n\nonLongPress method for link (optional)\n\n\n\n\n\n\nroundAvatar\n\n\nfalse\n\n\nboolean\n\n\nmake left avatar round\n\n\n\n\n\n\nsubtitle\n\n\nnone\n\n\nstring, number or object\n\n\nsubtitle text or custom view (optional)\n\n\n\n\n\n\nsubtitleContainerStyle\n\n\nnone\n\n\nstyle (object)\n\n\nprovide styling for subtitle container\n\n\n\n\n\n\nsubtitleStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional subtitle styling (optional )\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring, number or object\n\n\nmain title for list item, can be text or custom view (required)\n\n\n\n\n\n\ntitleStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional title styling (optional)\n\n\n\n\n\n\ntitleContainerStyle\n\n\nnone\n\n\nstyle (object)\n\n\nprovide styling for title container\n\n\n\n\n\n\nwrapperStyle\n\n\nnone\n\n\nobject (style)\n\n\nadditional wrapper styling (optional)\n\n\n\n\n\n\nunderlayColor\n\n\nwhite\n\n\nstring\n\n\ndefine underlay color for TouchableHighlight (optional)\n\n\n\n\n\n\nfontFamily\n\n\nHelevticaNeue (iOS), Sans Serif (android)\n\n\nstring\n\n\nspecify different font family\n\n\n\n\n\n\nrightTitle\n\n\nnone\n\n\nstring\n\n\nprovide a rightTitle to have a title show up on the right side of the button\n\n\n\n\n\n\nrightTitleContainerStyle\n\n\nflex: 1, alignItems: 'flex-end', justifyContent: 'center'\n\n\nobject (style)\n\n\nstyle the outer container of the rightTitle text\n\n\n\n\n\n\nrightTitleStyle\n\n\nmarginRight: 5, color: '#bdc6cf'\n\n\nobject (style)\n\n\nstyle the text of the rightTitle text\n\n\n\n\n\n\nlabel\n\n\nnone\n\n\nreact native component\n\n\nadd a label with your own styling by providing a label={\n} prop to ListItem\n\n\n\n\n\n\nswitchButton\n\n\nfalse\n\n\nboolean\n\n\nadd a switch to the right side of your component\n\n\n\n\n\n\nonSwitch\n\n\nfunction\n\n\nnone\n\n\nadd a callback function when the switch is toggled\n\n\n\n\n\n\nswitchDisabled\n\n\nboolean\n\n\nIf true the user won't be able to toggle the switch. Default value is false.\n\n\n\n\n\n\n\n\nswitchOnTintColor\n\n\nstring\n\n\nBackground color when the switch is turned on.\n\n\n\n\n\n\n\n\nswitchThumbTintColor\n\n\nstring\n\n\nColor of the foreground switch grip.\n\n\n\n\n\n\n\n\nswitchTintColor\n\n\nstring\n\n\nBorder color on iOS and background color on Android when the switch is turned off.\n\n\n\n\n\n\n\n\nswitched\n\n\nboolean\n\n\nThe value of the switch. If true the switch will be turned on. Default value is false.\n\n\n\n\n\n\n\n\ntextInput\n\n\nPropTypes.bool\n\n\nWhether to have the right title area be an input text component.\n\n\n\n\n\n\n\n\ntextInputAutoCapitalize\n\n\nboolean\n\n\nCan tell TextInput to automatically capitalize certain characters.\n\n\n\n\n\n\n\n\ntextInputAutoCorrect\n\n\nboolean\n\n\nCan tell TextInput to automatically capitalize certain characters.\n\n\n\n\n\n\n\n\ntextInputAutoFocus\n\n\nboolean\n\n\nIf true, focuses the input on componentDidMount. The default value is false.\n\n\n\n\n\n\n\n\ntextInputEditable\n\n\nboolean\n\n\nIf false, text is not editable. The default value is true.\n\n\n\n\n\n\n\n\ntextInputKeyboardType\n\n\nstring\n\n\nCan be one of the following: 'default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search'\n\n\n\n\n\n\n\n\ntextInputMaxLength\n\n\nnumber\n\n\nLimits the maximum number of characters that can be entered.\n\n\n\n\n\n\n\n\ntextInputMultiline\n\n\nboolean\n\n\nIf true, the text input can be multiple lines. The default value is false.\n\n\n\n\n\n\n\n\ntextInputOnChangeText\n\n\nfunction\n\n\nCallback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.\n\n\n\n\n\n\n\n\ntextInputOnFocus\n\n\nfunction\n\n\nCallback that is called when the text input is focused.\n\n\n\n\n\n\n\n\ntextInputValue\n\n\nstring\n\n\nManually set value of the input\n\n\n\n\n\n\n\n\ntextInputStyle\n\n\nobject (style)\n\n\nStyle for the input text\n\n\n\n\n\n\n\n\ntextInputContainerStyle\n\n\nobject (style)\n\n\nStyle for the container surrounding the input text\n\n\n\n\n\n\n\n\ntextInputOnBlur\n\n\nfunction\n\n\nCallback that is called when the text input is blurred.\n\n\n\n\n\n\n\n\ntextInputSelectTextOnFocus\n\n\nboolean\n\n\nIf true, all text will automatically be selected on focus.\n\n\n\n\n\n\n\n\ntextInputReturnKeyType\n\n\nstring\n\n\nDetermines how the return key should look. For more info see \nthe React Native docs\n\n\n\n\n\n\n\n\n\n\nBadges\n\n\n\n\nExample badge usage\n\nListItem\n\n  \n...\n\n  \nbadge\n=\n{{\n \nvalue\n:\n \n3\n,\n \nbadgeTextStyle\n:\n \n{\n \ncolor\n:\n \norange\n \n},\n \nbadgeContainerStyle\n:\n \n{\n \nmarginTop\n:\n \n-\n20\n \n}\n \n}}\n\n\n/\n\n\n\nListItem\n\n  \n...\n\n  \nbadge\n=\n{{\n \nelement\n:\n \nMyCustomElement\n \n}}\n\n\n/\n\n\n\n\n\n\nBadge props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nbadge\n\n\nnone\n\n\nobject, accepts the following properties: value (string), badgeContainerStyle (object), badgeTextStyle (object). You can override the default badge by providing your own component with it's own styling by providing badge={{ element: \n }}\n\n\nadd a badge to the ListItem by using this prop", 
            "title": "Lists"
        }, 
        {
            "location": "/API/lists/#using-map-function-implemented-with-avatar", 
            "text": "import   {   List ,   ListItem   }   from   react-native-elements  const   list   =   [ \n   { \n     name :   Amy Farha , \n     avatar_url :   https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg , \n     subtitle :   Vice President \n   }, \n   { \n     name :   Chris Jackson , \n     avatar_url :   https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg , \n     subtitle :   Vice Chairman \n   }, \n   ...   // more items  ]  List   containerStyle = {{ marginBottom :   20 }} \n   { \n     list . map (( l ,   i )   =   ( \n       ListItem \n         roundAvatar \n         avatar = {{ uri : l . avatar_url }} \n         key = { i } \n         title = { l . name } \n       / \n     )) \n   }  /List", 
            "title": "Using Map Function. Implemented with avatar."
        }, 
        {
            "location": "/API/lists/#using-map-function-implemented-with-link-and-icon", 
            "text": "import   {   List ,   ListItem   }   from   react-native-elements  const   list   =   [ \n   { \n     title :   Appointments , \n     icon :   av-timer \n   }, \n   { \n     title :   Trips , \n     icon :   flight-takeoff \n   }, \n   ...   // more items  ]  List \n   { \n     list . map (( item ,   i )   =   ( \n       ListItem \n         key = { i } \n         title = { item . title } \n         leftIcon = {{ name :   item . icon }} \n       / \n     )) \n   }  /List", 
            "title": "Using Map Function. Implemented with link and icon."
        }, 
        {
            "location": "/API/lists/#using-rn-listview-implemented-with-link-and-avatar", 
            "text": "import   {   List ,   ListItem   }   from   react-native-elements  const   list   =   [ \n   { \n     name :   Amy Farha , \n     avatar_url :   https://s3.amazonaws.com/uifaces/faces/twitter/ladylexy/128.jpg , \n     subtitle :   Vice President \n   }, \n   { \n     name :   Chris Jackson , \n     avatar_url :   https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg , \n     subtitle :   Vice Chairman \n   }, \n   ...   // more items  ]  renderRow   ( rowData ,   sectionID )   { \n   return   ( \n     ListItem \n       roundAvatar \n       key = { sectionID } \n       title = { rowData . name } \n       subtitle = { rowData . subtitle } \n       avatar = {{ uri : rowData . avatar_url }} \n     / \n   )  }  render   ()   { \n   return   ( \n     List \n       ListView \n         renderRow = { this . renderRow } \n         dataSource = { this . state . dataSource } \n       / \n     /List \n   )  }", 
            "title": "Using RN ListView. Implemented with link and avatar."
        }, 
        {
            "location": "/API/lists/#listitem-implemented-with-custom-view-for-subtitle", 
            "text": "import   {   List ,   ListItem   }   from   react-native-elements  render   ()   { \n   return   ( \n     List \n       ListItem \n         roundAvatar \n         title = Limited supply! Its like digital gold! \n         subtitle = { \n           View   style = { styles . subtitleView } \n             Image   source = { require ( ../images/rating.png )}   style = { styles . ratingImage } / \n             Text   style = { styles . ratingText } 5   months   ago /Text \n           /View \n         } \n         avatar = { require ( ../images/avatar1.jpg )} \n       / \n     /List \n   )  }  styles   =   StyleSheet . create ({ \n   subtitleView :   { \n     flexDirection :   row , \n     paddingLeft :   10 , \n     paddingTop :   5 \n   }, \n   ratingImage :   { \n     height :   19.21 , \n     width :   100 \n   }, \n   ratingText :   { \n     paddingLeft :   10 , \n     color :   grey \n   }  })", 
            "title": "ListItem implemented with custom View for Subtitle"
        }, 
        {
            "location": "/API/lists/#list-props", 
            "text": "prop  default  type  description      containerStyle  marginTop: 20, borderTopWidth: 1, borderBottomWidth: 1, borderBottomColor: #cbd2d9  object (style)  style the list container", 
            "title": "List Props"
        }, 
        {
            "location": "/API/lists/#listitem-props", 
            "text": "prop  default  type  description      avatar  none  object  left avatar (optional). Refer to  React Native Image Source    avatarStyle  none  object (style)  avatar styling (optional)    chevronColor  #bdc6cf  string  set chevron color    component  View or TouchableHighlight if onPress method is added as prop  React Native element  replace element with custom element (optional)    containerStyle  none  object (style)  additional main container styling (optional)    hideChevron  false  boolean  set if you do not want a chevron (optional)    leftIcon  none  object {name, color, style, type} (type defaults to material icons)  icon configuration for left icon (optional)    rightIcon  {name: 'chevron-right'}  object {name, color, style, type} (type defaults to material icons)  icon configuration for right icon (optional). Shows up unless hideChevron is set    onPress  none  function  onPress method for link (optional)    onLongPress  none  function  onLongPress method for link (optional)    roundAvatar  false  boolean  make left avatar round    subtitle  none  string, number or object  subtitle text or custom view (optional)    subtitleContainerStyle  none  style (object)  provide styling for subtitle container    subtitleStyle  none  object (style)  additional subtitle styling (optional )    title  none  string, number or object  main title for list item, can be text or custom view (required)    titleStyle  none  object (style)  additional title styling (optional)    titleContainerStyle  none  style (object)  provide styling for title container    wrapperStyle  none  object (style)  additional wrapper styling (optional)    underlayColor  white  string  define underlay color for TouchableHighlight (optional)    fontFamily  HelevticaNeue (iOS), Sans Serif (android)  string  specify different font family    rightTitle  none  string  provide a rightTitle to have a title show up on the right side of the button    rightTitleContainerStyle  flex: 1, alignItems: 'flex-end', justifyContent: 'center'  object (style)  style the outer container of the rightTitle text    rightTitleStyle  marginRight: 5, color: '#bdc6cf'  object (style)  style the text of the rightTitle text    label  none  react native component  add a label with your own styling by providing a label={ } prop to ListItem    switchButton  false  boolean  add a switch to the right side of your component    onSwitch  function  none  add a callback function when the switch is toggled    switchDisabled  boolean  If true the user won't be able to toggle the switch. Default value is false.     switchOnTintColor  string  Background color when the switch is turned on.     switchThumbTintColor  string  Color of the foreground switch grip.     switchTintColor  string  Border color on iOS and background color on Android when the switch is turned off.     switched  boolean  The value of the switch. If true the switch will be turned on. Default value is false.     textInput  PropTypes.bool  Whether to have the right title area be an input text component.     textInputAutoCapitalize  boolean  Can tell TextInput to automatically capitalize certain characters.     textInputAutoCorrect  boolean  Can tell TextInput to automatically capitalize certain characters.     textInputAutoFocus  boolean  If true, focuses the input on componentDidMount. The default value is false.     textInputEditable  boolean  If false, text is not editable. The default value is true.     textInputKeyboardType  string  Can be one of the following: 'default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search'     textInputMaxLength  number  Limits the maximum number of characters that can be entered.     textInputMultiline  boolean  If true, the text input can be multiple lines. The default value is false.     textInputOnChangeText  function  Callback that is called when the text input's text changes. Changed text is passed as an argument to the callback handler.     textInputOnFocus  function  Callback that is called when the text input is focused.     textInputValue  string  Manually set value of the input     textInputStyle  object (style)  Style for the input text     textInputContainerStyle  object (style)  Style for the container surrounding the input text     textInputOnBlur  function  Callback that is called when the text input is blurred.     textInputSelectTextOnFocus  boolean  If true, all text will automatically be selected on focus.     textInputReturnKeyType  string  Determines how the return key should look. For more info see  the React Native docs", 
            "title": "ListItem props"
        }, 
        {
            "location": "/API/lists/#badges", 
            "text": "Example badge usage ListItem \n   ... \n   badge = {{   value :   3 ,   badgeTextStyle :   {   color :   orange   },   badgeContainerStyle :   {   marginTop :   - 20   }   }}  /  ListItem \n   ... \n   badge = {{   element :   MyCustomElement   }}  /", 
            "title": "Badges"
        }, 
        {
            "location": "/API/lists/#badge-props", 
            "text": "prop  default  type  description      badge  none  object, accepts the following properties: value (string), badgeContainerStyle (object), badgeTextStyle (object). You can override the default badge by providing your own component with it's own styling by providing badge={{ element:   }}  add a badge to the ListItem by using this prop", 
            "title": "Badge props"
        }, 
        {
            "location": "/API/pricing/", 
            "text": "import\n \n{\n \nPricingCard\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nPricingCard\n\n  \ncolor\n=\n#4f9deb\n\n  \ntitle\n=\nFree\n\n  \nprice\n=\n$0\n\n  \ninfo\n=\n{[\n1 User\n,\n \nBasic Support\n,\n \nAll Core Features\n]}\n\n  \nbutton\n=\n{{\n \ntitle\n:\n \nGET STARTED\n,\n \nicon\n:\n \nflight-takeoff\n \n}}\n\n\n/\n\n\n\n\n\n\nPricingCard props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring\n\n\ntitle (required)\n\n\n\n\n\n\nprice\n\n\nnone\n\n\nstring\n\n\nprice (required)\n\n\n\n\n\n\ncolor\n\n\nnone\n\n\nstring\n\n\ncolor scheme for button \n title (required)\n\n\n\n\n\n\ninfo\n\n\nnone\n\n\narray of strings\n\n\npricing information (optional)\n\n\n\n\n\n\nbutton\n\n\nnone\n\n\nobject {title, icon, buttonStyle}\n\n\nbutton information (required)\n\n\n\n\n\n\nonButtonPress\n\n\nnone\n\n\nany\n\n\nfunction to be run when button is pressed\n\n\n\n\n\n\ncontainerStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nouter component styling (optional)\n\n\n\n\n\n\nwrapperStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\ninner wrapper component styling (optional)\n\n\n\n\n\n\ntitleFont\n\n\nSystem font (font weight 800) (iOS), Sans Serif Black (android)\n\n\nstring\n\n\nspecify title font family\n\n\n\n\n\n\npricingFont\n\n\nSystem font (font weight 700) (iOS), Sans Serif Bold (android)\n\n\nstring\n\n\nspecify pricing font family\n\n\n\n\n\n\ninfoFont\n\n\nSystem font bold (iOS), Sans Serif Bold (android)\n\n\nstring\n\n\nspecify pricing information font family\n\n\n\n\n\n\nbuttonFont\n\n\nSystem font (iOS), Sans Serif (android)\n\n\nstring\n\n\nspecify button font family", 
            "title": "Pricing"
        }, 
        {
            "location": "/API/pricing/#pricingcard-props", 
            "text": "prop  default  type  description      title  none  string  title (required)    price  none  string  price (required)    color  none  string  color scheme for button   title (required)    info  none  array of strings  pricing information (optional)    button  none  object {title, icon, buttonStyle}  button information (required)    onButtonPress  none  any  function to be run when button is pressed    containerStyle  inherited styling  object (style)  outer component styling (optional)    wrapperStyle  inherited styling  object (style)  inner wrapper component styling (optional)    titleFont  System font (font weight 800) (iOS), Sans Serif Black (android)  string  specify title font family    pricingFont  System font (font weight 700) (iOS), Sans Serif Bold (android)  string  specify pricing font family    infoFont  System font bold (iOS), Sans Serif Bold (android)  string  specify pricing information font family    buttonFont  System font (iOS), Sans Serif (android)  string  specify button font family", 
            "title": "PricingCard props"
        }, 
        {
            "location": "/API/searchbar/", 
            "text": "import\n \n{\n \nSearchBar\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nSearchBar\n\n  \nonChangeText\n=\n{\nsomeMethod\n}\n\n  \nplaceholder\n=\nType Here...\n \n/\n\n\n\nSearchBar\n\n  \nnoIcon\n\n  \nonChangeText\n=\n{\nsomeMethod\n}\n\n  \nplaceholder\n=\nType Here...\n \n/\n\n\n\nSearchBar\n\n  \nround\n\n  \nonChangeText\n=\n{\nsomeMethod\n}\n\n  \nplaceholder\n=\nType Here...\n \n/\n\n\n\nSearchBar\n\n  \nlightTheme\n\n  \nonChangeText\n=\n{\nsomeMethod\n}\n\n  \nplaceholder\n=\nType Here...\n \n/\n\n\n\n\n\n\nSearchBar props\n\n\nThis component inherits \nall native TextInput props that come with a standard React Native TextInput element\n, along with the following:\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncontainerStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nstyle the container of the TextInput\n\n\n\n\n\n\ninputStyle\n\n\ninherited styling\n\n\nobject (style)\n\n\nstyle the TextInput\n\n\n\n\n\n\nicon\n\n\n{ color: '#86939e', name: 'search' }\n\n\nobject {name (string), color (string), style (object)}\n\n\nspecify color, styling, or another \nMaterial Icon Name\n\n\n\n\n\n\nnoIcon\n\n\nfalse\n\n\nboolean\n\n\nremove icon from textinput\n\n\n\n\n\n\nlightTheme\n\n\nfalse\n\n\nboolean\n\n\nchange theme to light theme\n\n\n\n\n\n\nround\n\n\nfalse\n\n\nboolean\n\n\nchange TextInput styling to rounded corners\n\n\n\n\n\n\ncontainerRef\n\n\nnone\n\n\nref\n\n\nref for TextInput conainer\n\n\n\n\n\n\ntextInputRef\n\n\nnone\n\n\nref\n\n\nref for TextInput\n\n\n\n\n\n\nfocus\n\n\nnone\n\n\nfunction\n\n\ncall focus on the textinput(optional), eg \nthis.refs.someInputRef.focus()\n\n\n\n\n\n\nunderlineColorAndroid\n\n\ntransparent\n\n\nstring (color)\n\n\nspecify other than the default transparent underline color\n\n\n\n\n\n\nloadingIcon\n\n\n{ color: '#86939e' }\n\n\nobject {color (string), style (object)}\n\n\nspecify color, styling of the loading ActivityIndicator effect\n\n\n\n\n\n\nshowLoadingIcon\n\n\nfalse\n\n\nboolean\n\n\nshow the loading ActivityIndicator effect\n\n\n\n\n\n\nplaceholder\n\n\n''\n\n\nstring\n\n\nset the placeholder text\n\n\n\n\n\n\nplaceholderTextColor\n\n\n'#86939e'\n\n\nstring\n\n\nset the color of the placeholder text\n\n\n\n\n\n\nonChangeText\n\n\nnone\n\n\nfunction\n\n\nmethod to fire when text is changed\n\n\n\n\n\n\nclearIcon\n\n\n{ color: '#86939e', name: 'search' }\n\n\nobject {name (string), color (string), style (object)}\n\n\nspecify color, styling, or another \nMaterial Icon Name\n\n\n\n\n\n\n(Note: pressing on this icon clears text inside the searchbar)", 
            "title": "Searchbar"
        }, 
        {
            "location": "/API/searchbar/#searchbar-props", 
            "text": "", 
            "title": "SearchBar props"
        }, 
        {
            "location": "/API/searchbar/#this-component-inherits-all-native-textinput-props-that-come-with-a-standard-react-native-textinput-element-along-with-the-following", 
            "text": "prop  default  type  description      containerStyle  inherited styling  object (style)  style the container of the TextInput    inputStyle  inherited styling  object (style)  style the TextInput    icon  { color: '#86939e', name: 'search' }  object {name (string), color (string), style (object)}  specify color, styling, or another  Material Icon Name    noIcon  false  boolean  remove icon from textinput    lightTheme  false  boolean  change theme to light theme    round  false  boolean  change TextInput styling to rounded corners    containerRef  none  ref  ref for TextInput conainer    textInputRef  none  ref  ref for TextInput    focus  none  function  call focus on the textinput(optional), eg  this.refs.someInputRef.focus()    underlineColorAndroid  transparent  string (color)  specify other than the default transparent underline color    loadingIcon  { color: '#86939e' }  object {color (string), style (object)}  specify color, styling of the loading ActivityIndicator effect    showLoadingIcon  false  boolean  show the loading ActivityIndicator effect    placeholder  ''  string  set the placeholder text    placeholderTextColor  '#86939e'  string  set the color of the placeholder text    onChangeText  none  function  method to fire when text is changed    clearIcon  { color: '#86939e', name: 'search' }  object {name (string), color (string), style (object)}  specify color, styling, or another  Material Icon Name    (Note: pressing on this icon clears text inside the searchbar)", 
            "title": "This component inherits all native TextInput props that come with a standard React Native TextInput element, along with the following:"
        }, 
        {
            "location": "/API/side_menu/", 
            "text": "This component implements \nreact-native-side-menu\n which is part of the \nreact-native-community\n.\n\n\n\n\nimport\n \n{\n \nSideMenu\n,\n \nList\n,\n \nListItem\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nconstructor\n \n()\n \n{\n\n  \nsuper\n()\n\n  \nthis\n.\nstate\n \n=\n \n{\n\n    \nisOpen\n:\n \nfalse\n\n  \n}\n\n  \nthis\n.\ntoggleSideMenu\n \n=\n \nthis\n.\ntoggleSideMenu\n.\nbind\n(\nthis\n)\n\n\n}\n\n\n\nonSideMenuChange\n \n(\nisOpen\n:\n \nboolean\n)\n \n{\n\n  \nthis\n.\nsetState\n({\n\n    \nisOpen\n:\n \nisOpen\n\n  \n})\n\n\n}\n\n\n\ntoggleSideMenu\n \n()\n \n{\n\n  \nthis\n.\nsetState\n({\n\n    \nisOpen\n:\n \n!\nthis\n.\nstate\n.\nisOpen\n\n  \n})\n\n\n}\n\n\n\nrender\n \n()\n \n{\n\n  \nconst\n \nMenuComponent\n \n=\n \n(\n\n    \nView\n \nstyle\n=\n{{\nflex\n:\n \n1\n,\n \nbackgroundColor\n:\n \n#ededed\n,\n \npaddingTop\n:\n \n50\n}}\n\n      \nList\n \ncontainerStyle\n=\n{{\nmarginBottom\n:\n \n20\n}}\n\n      \n{\n\n        \nlist\n.\nmap\n((\nl\n,\n \ni\n)\n \n=\n \n(\n\n          \nListItem\n\n            \nroundAvatar\n\n            \nonPress\n=\n{()\n \n=\n \nconsole\n.\nlog\n(\nPressed\n)}\n\n            \navatar\n=\n{\nl\n.\navatar_url\n}\n\n            \nkey\n=\n{\ni\n}\n\n            \ntitle\n=\n{\nl\n.\nname\n}\n\n            \nsubtitle\n=\n{\nl\n.\nsubtitle\n}\n\n          \n/\n\n        \n))\n\n      \n}\n\n      \n/List\n\n    \n/View\n\n  \n)\n\n\n  \nreturn\n \n(\n\n    \nSideMenu\n\n      \nisOpen\n=\n{\nthis\n.\nstate\n.\nisOpen\n}\n\n      \nonChange\n=\n{\nthis\n.\nonSideMenuChange\n.\nbind\n(\nthis\n)}\n\n      \nmenu\n=\n{\nMenuComponent\n}\n\n      \nApp\n \ntoggleSideMenu\n=\n{\nthis\n.\ntoggleSideMenu\n.\nbind\n(\nthis\n)}\n \n/\n\n    \n/SideMenu\n\n  \n)\n\n\n}\n\n\n\n\n\n\nSideMenu props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nmenu\n\n\ninherited\n\n\nReact.Component\n\n\nMenu component\n\n\n\n\n\n\nisOpen\n\n\nfalse\n\n\nBoolean\n\n\nProps driven control over menu open state\n\n\n\n\n\n\nopenMenuOffset\n\n\n of device screen width\n\n\nNumber\n\n\nContent view left margin if menu is opened\n\n\n\n\n\n\nhiddenMenuOffset\n\n\nnone\n\n\nNumber\n\n\nContent view left margin if menu is hidden\n\n\n\n\n\n\nedgeHitWidth\n\n\nnone\n\n\nNumber\n\n\nEdge distance on content view to open side menu, defaults to 60\n\n\n\n\n\n\ntoleranceX\n\n\nnone\n\n\nNumber\n\n\nX axis tolerance\n\n\n\n\n\n\ntoleranceY\n\n\nnone\n\n\nNumber\n\n\nY axis tolerance\n\n\n\n\n\n\ndisableGestures\n\n\nfalse\n\n\nBool\n\n\nDisable whether the menu can be opened with gestures or not\n\n\n\n\n\n\nonStartShould \n SetResponderCapture\n\n\nnone\n\n\nFunction\n\n\nFunction that accepts event as an argument and specify if side-menu should react on the touch or not. Check \nhttps://facebook.github.io/react-native/docs/gesture-responder-system.html\n for more details\n\n\n\n\n\n\nonChange\n\n\nnone\n\n\nFunction\n\n\nCallback on menu open/close. Is passed isOpen as an argument\n\n\n\n\n\n\nonMove\n\n\nnone\n\n\nFunction\n\n\nCallback on menu move. Is passed left as an argument\n\n\n\n\n\n\nmenuPosition\n\n\nleft\n\n\nString\n\n\neither 'left' or 'right'\n\n\n\n\n\n\nanimationFunction\n\n\nnone\n\n\n(Function -\n Object)\n\n\nFunction that accept 2 arguments (prop, value) and return an object: \n - \nprop\n you should use at the place you specify parameter to animate \n - \nvalue\n you should use to specify the final value of prop\n\n\n\n\n\n\nanimationStyle\n\n\nnone\n\n\n(Function -\n Object)\n\n\nFunction that accept 1 argument (value) and return an object: \n - \nvalue\n you should use at the place you need current value of animated parameter (left offset of content view)\n\n\n\n\n\n\nbounceBackOnOverdraw\n\n\ntrue\n\n\nboolean\n\n\nwhen true, content view will bounce back to openMenuOffset when dragged further\n\n\n\n\n\n\n\n\n\n\nFor issues or feature requests related to SideMenu component please click \nhere", 
            "title": "Side menu"
        }, 
        {
            "location": "/API/side_menu/#sidemenu-props", 
            "text": "prop  default  type  description      menu  inherited  React.Component  Menu component    isOpen  false  Boolean  Props driven control over menu open state    openMenuOffset   of device screen width  Number  Content view left margin if menu is opened    hiddenMenuOffset  none  Number  Content view left margin if menu is hidden    edgeHitWidth  none  Number  Edge distance on content view to open side menu, defaults to 60    toleranceX  none  Number  X axis tolerance    toleranceY  none  Number  Y axis tolerance    disableGestures  false  Bool  Disable whether the menu can be opened with gestures or not    onStartShould   SetResponderCapture  none  Function  Function that accepts event as an argument and specify if side-menu should react on the touch or not. Check  https://facebook.github.io/react-native/docs/gesture-responder-system.html  for more details    onChange  none  Function  Callback on menu open/close. Is passed isOpen as an argument    onMove  none  Function  Callback on menu move. Is passed left as an argument    menuPosition  left  String  either 'left' or 'right'    animationFunction  none  (Function -  Object)  Function that accept 2 arguments (prop, value) and return an object:   -  prop  you should use at the place you specify parameter to animate   -  value  you should use to specify the final value of prop    animationStyle  none  (Function -  Object)  Function that accept 1 argument (value) and return an object:   -  value  you should use at the place you need current value of animated parameter (left offset of content view)    bounceBackOnOverdraw  true  boolean  when true, content view will bounce back to openMenuOffset when dragged further      For issues or feature requests related to SideMenu component please click  here", 
            "title": "SideMenu props"
        }, 
        {
            "location": "/API/slider/", 
            "text": "A pure JavaScript \n component for react-native. It is a drop-in replacement for Slider.\n\n\n\n\nThis component is a forked implementation of  \nreact-native-slider\n. Also note that due to the nature of the platform, and the existence of breaking changes between React Native releases, this implementation currently only supports v0.26.0+\n\n\n\n\nimport\n \n{\n \nSlider\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nView\n \nstyle\n=\n{{\nflex\n:\n \n1\n,\n \nalignItems\n:\n \nstretch\n,\n \njustifyContent\n:\n \ncenter\n}}\n\n  \nSlider\n\n    \nvalue\n=\n{\nthis\n.\nstate\n.\nvalue\n}\n\n    \nonValueChange\n=\n{(\nvalue\n)\n \n=\n \nthis\n.\nsetState\n({\nvalue\n})}\n \n/\n\n  \nText\nValue\n:\n \n{\nthis\n.\nstate\n.\nvalue\n}\n/Text\n\n\n/View\n\n\n\n\n\n\nSlider Props\n\n\n\n\n\n\n\n\nprop\n\n\ntype\n\n\noptional\n\n\ndefault\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nnumber\n\n\nYes\n\n\n0\n\n\nInitial value of the slider\n\n\n\n\n\n\ndisabled\n\n\nbool\n\n\nYes\n\n\nfalse\n\n\nIf true the user won't be able to move the slider\n\n\n\n\n\n\nminimumValue\n\n\nnumber\n\n\nYes\n\n\n0\n\n\nInitial minimum value of the slider\n\n\n\n\n\n\nmaximumValue\n\n\nnumber\n\n\nYes\n\n\n1\n\n\nInitial maximum value of the slider\n\n\n\n\n\n\nstep\n\n\nnumber\n\n\nYes\n\n\n0\n\n\nStep value of the slider. The value should be between 0 and maximumValue - minimumValue)\n\n\n\n\n\n\nminimumTrackTintColor\n\n\nstring\n\n\nYes\n\n\n'#3f3f3f'\n\n\nThe color used for the track to the left of the button\n\n\n\n\n\n\nmaximumTrackTintColor\n\n\nstring\n\n\nYes\n\n\n'#b3b3b3'\n\n\nThe color used for the track to the right of the button\n\n\n\n\n\n\nthumbTintColor\n\n\nstring\n\n\nYes\n\n\n'#343434'\n\n\nThe color used for the thumb\n\n\n\n\n\n\nthumbTouchSize\n\n\nobject\n\n\nYes\n\n\n{width: 40, height: 40}\n\n\nThe size of the touch area that allows moving the thumb. The touch area has the same center as the visible thumb. This allows to have a visually small thumb while still allowing the user to move it easily.\n\n\n\n\n\n\nonValueChange\n\n\nfunction\n\n\nYes\n\n\n\n\nCallback continuously called while the user is dragging the slider\n\n\n\n\n\n\nonSlidingStart\n\n\nfunction\n\n\nYes\n\n\n\n\nCallback called when the user starts changing the value (e.g. when the slider is pressed)\n\n\n\n\n\n\nonSlidingComplete\n\n\nfunction\n\n\nYes\n\n\n\n\nCallback called when the user finishes changing the value (e.g. when the slider is released)\n\n\n\n\n\n\nstyle\n\n\nstyle\n\n\nYes\n\n\n\n\nThe style applied to the slider container\n\n\n\n\n\n\ntrackStyle\n\n\nstyle\n\n\nYes\n\n\n\n\nThe style applied to the track\n\n\n\n\n\n\nthumbStyle\n\n\nstyle\n\n\nYes\n\n\n\n\nThe style applied to the thumb\n\n\n\n\n\n\ndebugTouchArea\n\n\nbool\n\n\nYes\n\n\nfalse\n\n\nSet this to true to visually see the thumb touch rect in green.\n\n\n\n\n\n\nanimateTransitions\n\n\nbool\n\n\nYes\n\n\nfalse\n\n\nSet to true if you want to use the default 'spring' animation\n\n\n\n\n\n\nanimationType\n\n\nstring\n\n\nYes\n\n\n'timing'\n\n\nSet to 'spring' or 'timing' to use one of those two types of animations with the default \nanimation properties\n.\n\n\n\n\n\n\nanimationConfig\n\n\nobject\n\n\nYes\n\n\nundefined\n\n\nUsed to configure the animation parameters.  These are the same parameters in the \nAnimated library\n.", 
            "title": "Slider"
        }, 
        {
            "location": "/API/slider/#slider-props", 
            "text": "prop  type  optional  default  description      value  number  Yes  0  Initial value of the slider    disabled  bool  Yes  false  If true the user won't be able to move the slider    minimumValue  number  Yes  0  Initial minimum value of the slider    maximumValue  number  Yes  1  Initial maximum value of the slider    step  number  Yes  0  Step value of the slider. The value should be between 0 and maximumValue - minimumValue)    minimumTrackTintColor  string  Yes  '#3f3f3f'  The color used for the track to the left of the button    maximumTrackTintColor  string  Yes  '#b3b3b3'  The color used for the track to the right of the button    thumbTintColor  string  Yes  '#343434'  The color used for the thumb    thumbTouchSize  object  Yes  {width: 40, height: 40}  The size of the touch area that allows moving the thumb. The touch area has the same center as the visible thumb. This allows to have a visually small thumb while still allowing the user to move it easily.    onValueChange  function  Yes   Callback continuously called while the user is dragging the slider    onSlidingStart  function  Yes   Callback called when the user starts changing the value (e.g. when the slider is pressed)    onSlidingComplete  function  Yes   Callback called when the user finishes changing the value (e.g. when the slider is released)    style  style  Yes   The style applied to the slider container    trackStyle  style  Yes   The style applied to the track    thumbStyle  style  Yes   The style applied to the thumb    debugTouchArea  bool  Yes  false  Set this to true to visually see the thumb touch rect in green.    animateTransitions  bool  Yes  false  Set to true if you want to use the default 'spring' animation    animationType  string  Yes  'timing'  Set to 'spring' or 'timing' to use one of those two types of animations with the default  animation properties .    animationConfig  object  Yes  undefined  Used to configure the animation parameters.  These are the same parameters in the  Animated library .", 
            "title": "Slider Props"
        }, 
        {
            "location": "/API/social_icons/", 
            "text": "import\n \n{\n \nSocialIcon\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\n// Icon\n\n\nSocialIcon\n\n  \ntype\n=\ntwitter\n\n\n/\n\n\n\nSocialIcon\n\n  \nraised\n=\n{\nfalse\n}\n\n  \ntype\n=\ngitlab\n\n\n/\n\n\n\nSocialIcon\n\n  \nlight\n\n  \ntype\n=\nmedium\n\n\n/\n\n\n\nSocialIcon\n\n  \nlight\n\n  \nraised\n=\n{\nfalse\n}\n\n  \ntype\n=\nmedium\n\n\n/\n\n\n\n\n// Button\n\n\nSocialIcon\n\n  \ntitle\n=\nSign In With Facebook\n\n  \nbutton\n\n  \ntype\n=\nfacebook\n\n\n/\n\n\n\nSocialIcon\n\n  \ntitle\n=\nSome Twitter Message\n\n  \nbutton\n\n  \ntype\n=\ntwitter\n\n\n/\n\n\n\nSocialIcon\n\n  \nbutton\n\n  \ntype\n=\nmedium\n\n\n/\n\n\n\n\nSocialIcon\n\n  \nbutton\n\n  \nlight\n\n  \ntype\n=\ninstagram\n\n\n/\n\n\n\n\n\n\nSocialIcon props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring\n\n\ntitle if made into a button (optional)\n\n\n\n\n\n\ntype\n\n\nnone\n\n\nsocial media type (facebook, twitter, google-plus-official, pinterest, linkedin, youtube, vimeo, tumblr, instagram, quora, foursquare, wordpress, stumbleupon, github, github-alt, twitch, medium, soundcloud, gitlab, angellist, codepen)\n\n\nsocial media type (required)\n\n\n\n\n\n\nraised\n\n\ntrue\n\n\nboolean\n\n\nraised adds a drop shadow, set to false to remove\n\n\n\n\n\n\nbutton\n\n\nfalse\n\n\nboolean\n\n\ncreates button (optional)\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nonPress method (optional)\n\n\n\n\n\n\nonLongPress\n\n\nnone\n\n\nfunction\n\n\nonLongPress method (optional)\n\n\n\n\n\n\nlight\n\n\nfalse\n\n\nboolean\n\n\nreverses icon color scheme, setting background to white and icon to primary color\n\n\n\n\n\n\niconStyle\n\n\nnone\n\n\nobject (style)\n\n\nextra styling for icon component (optional)\n\n\n\n\n\n\nstyle\n\n\nnone\n\n\nobject (style)\n\n\nbutton styling (optional)\n\n\n\n\n\n\niconColor\n\n\nwhite\n\n\nstring\n\n\nicon color (optional)\n\n\n\n\n\n\niconSize\n\n\n24\n\n\nnumber\n\n\nicon size (optional)\n\n\n\n\n\n\ncomponent\n\n\nTouchableHighlight\n\n\nReact Native Component\n\n\ntype of button (optional)\n\n\n\n\n\n\nfontFamily\n\n\nSystem font bold (iOS), Sans Serif Black (android)\n\n\nstring\n\n\nspecify different font family (optional)\n\n\n\n\n\n\nfontWeight\n\n\nbold (ios), black(android)\n\n\nstring\n\n\nspecify font weight of title if set as a button with a title\n\n\n\n\n\n\nfontStyle\n\n\nnone\n\n\nobject (style)\n\n\nspecify text styling (optional)\n\n\n\n\n\n\ndisabled\n\n\nfalse\n\n\nboolean\n\n\ndisable button (optional)\n\n\n\n\n\n\nloading\n\n\nfalse\n\n\nboolean\n\n\nshows loading indicator (optional)", 
            "title": "Social icons"
        }, 
        {
            "location": "/API/social_icons/#socialicon-props", 
            "text": "prop  default  type  description      title  none  string  title if made into a button (optional)    type  none  social media type (facebook, twitter, google-plus-official, pinterest, linkedin, youtube, vimeo, tumblr, instagram, quora, foursquare, wordpress, stumbleupon, github, github-alt, twitch, medium, soundcloud, gitlab, angellist, codepen)  social media type (required)    raised  true  boolean  raised adds a drop shadow, set to false to remove    button  false  boolean  creates button (optional)    onPress  none  function  onPress method (optional)    onLongPress  none  function  onLongPress method (optional)    light  false  boolean  reverses icon color scheme, setting background to white and icon to primary color    iconStyle  none  object (style)  extra styling for icon component (optional)    style  none  object (style)  button styling (optional)    iconColor  white  string  icon color (optional)    iconSize  24  number  icon size (optional)    component  TouchableHighlight  React Native Component  type of button (optional)    fontFamily  System font bold (iOS), Sans Serif Black (android)  string  specify different font family (optional)    fontWeight  bold (ios), black(android)  string  specify font weight of title if set as a button with a title    fontStyle  none  object (style)  specify text styling (optional)    disabled  false  boolean  disable button (optional)    loading  false  boolean  shows loading indicator (optional)", 
            "title": "SocialIcon props"
        }, 
        {
            "location": "/API/tabbar/", 
            "text": "This component implements the \nreact-native-tab-navigator\n from \nExponent\n. Check out \nExponent\n if you haven't already!\n\n\n\n\nimport\n \n{\n \nTabs\n,\n \nTab\n,\n \nIcon\n \n}\n \nfrom\n \nreact-native-elements\n\n\n\nconstructor\n()\n \n{\n\n  \nsuper\n()\n\n  \nthis\n.\nstate\n \n=\n \n{\n\n    \nselectedTab\n:\n \nprofile\n,\n\n  \n}\n\n\n}\n\n\n\nchangeTab\n \n(\nselectedTab\n)\n \n{\n\n  \nthis\n.\nsetState\n({\nselectedTab\n})\n\n\n}\n\n\n\nconst\n \n{\n \nselectedTab\n \n}\n \n=\n \nthis\n.\nstate\n\n\n\nTabs\n\n  \nTab\n\n    \ntitleStyle\n=\n{{\nfontWeight\n:\n \nbold\n,\n \nfontSize\n:\n \n10\n}}\n\n    \nselectedTitleStyle\n=\n{{\nmarginTop\n:\n \n-\n1\n,\n \nmarginBottom\n:\n \n6\n}}\n\n    \nselected\n=\n{\nselectedTab\n \n===\n \nfeed\n}\n\n    \ntitle\n=\n{\nselectedTab\n \n===\n \nfeed\n \n?\n \nFEED\n \n:\n \nnull\n}\n\n    \nrenderIcon\n=\n{()\n \n=\n \nIcon\n \ncontainerStyle\n=\n{{\njustifyContent\n:\n \ncenter\n,\n \nalignItems\n:\n \ncenter\n,\n \nmarginTop\n:\n \n12\n}}\n \ncolor\n=\n{\n#5e6977\n}\n \nname\n=\nwhatshot\n \nsize\n=\n{\n33\n}\n \n/\n}\n\n    \nrenderSelectedIcon\n=\n{()\n \n=\n \nIcon\n \ncolor\n=\n{\n#6296f9\n}\n \nname\n=\nwhatshot\n \nsize\n=\n{\n30\n}\n \n/\n}\n\n    \nonPress\n=\n{()\n \n=\n \nthis\n.\nchangeTab\n(\nfeed\n)}\n\n    \nFeed\n \n/\n\n  \n/Tab\n\n  \nTab\n\n    \ntitleStyle\n=\n{{\nfontWeight\n:\n \nbold\n,\n \nfontSize\n:\n \n10\n}}\n\n    \nselectedTitleStyle\n=\n{{\nmarginTop\n:\n \n-\n1\n,\n \nmarginBottom\n:\n \n6\n}}\n\n    \nselected\n=\n{\nselectedTab\n \n===\n \nprofile\n}\n\n    \ntitle\n=\n{\nselectedTab\n \n===\n \nprofile\n \n?\n \nPROFILE\n \n:\n \nnull\n}\n\n    \nrenderIcon\n=\n{()\n \n=\n \nIcon\n \ncontainerStyle\n=\n{{\njustifyContent\n:\n \ncenter\n,\n \nalignItems\n:\n \ncenter\n,\n \nmarginTop\n:\n \n12\n}}\n \ncolor\n=\n{\n#5e6977\n}\n \nname\n=\nperson\n \nsize\n=\n{\n33\n}\n \n/\n}\n\n    \nrenderSelectedIcon\n=\n{()\n \n=\n \nIcon\n \ncolor\n=\n{\n#6296f9\n}\n \nname\n=\nperson\n \nsize\n=\n{\n30\n}\n \n/\n}\n\n    \nonPress\n=\n{()\n \n=\n \nthis\n.\nchangeTab\n(\nprofile\n)}\n\n    \nProfile\n \n/\n\n  \n/Tab\n\n  \n/* ... more tabs here */\n\n\n/Tabs\n\n\n\n\n\n\nHide Tab Bar\n\n\nconstructor\n \n()\n \n{\n\n  \nsuper\n()\n\n  \nthis\n.\nstate\n \n=\n \n{\n\n    \nhideTabBar\n:\n \ntrue\n,\n\n  \n}\n\n\n}\n\n\n\nhideTabBar\n(\nvalue\n)\n \n{\n\n  \nthis\n.\nsetState\n({\n\n    \nhideTabBar\n:\n \nvalue\n\n  \n});\n\n\n}\n\n\n\nlet\n \ntabBarStyle\n \n=\n \n{};\n\n\nlet\n \nsceneStyle\n \n=\n \n{};\n\n\nif\n \n(\nthis\n.\nstate\n.\nhideTabBar\n)\n \n{\n\n  \ntabBarStyle\n.\nheight\n \n=\n \n0\n;\n\n  \ntabBarStyle\n.\noverflow\n \n=\n \nhidden\n;\n\n  \nsceneStyle\n.\npaddingBottom\n \n=\n \n0\n;\n\n\n}\n\n\n\nTabs\n \nhidesTabTouch\n \ntabBarStyle\n=\n{\ntabBarStyle\n}\n \nsceneStyle\n=\n{\nsceneStyle\n}\n\n  \nTab\n\n    \nLoginView\n \nhideTabBar\n=\n{\nthis\n.\nhideTabBar\n.\nbind\n(\nthis\n)}\n \n/\n\n  \n/Tab\n\n  \n/* ... tabs here */\n\n\n/Tabs\n\n\n\n\n\n\nTabs Props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsceneStyle\n\n\ninherited\n\n\nobject (style)\n\n\ndefine for rendered scene\n\n\n\n\n\n\ntabBarStyle\n\n\ninherited\n\n\nobject (style)\n\n\ndefine style for TabBar\n\n\n\n\n\n\ntabBarShadowStyle\n\n\ninherited\n\n\nobject (style)\n\n\ndefine shadow style for tabBar\n\n\n\n\n\n\nhidesTabTouch\n\n\nfalse\n\n\nboolean\n\n\ndisable onPress opacity for Tab\n\n\n\n\n\n\n\n\nTab Props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nrenderIcon\n\n\nnone\n\n\nfunction\n\n\nreturns Item icon\n\n\n\n\n\n\nrenderSelectedIcon\n\n\nnone\n\n\nfunction\n\n\nreturns selected Item icon\n\n\n\n\n\n\nbadgeText\n\n\nnone\n\n\nstring or number\n\n\ntext for Item badge\n\n\n\n\n\n\nrenderBadge\n\n\nnone\n\n\nfunction\n\n\nreturns Item badge\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring\n\n\nItem title\n\n\n\n\n\n\ntitleStyle\n\n\ninherited\n\n\nstyle\n\n\nstyling for Item title\n\n\n\n\n\n\nselectedTitleStyle\n\n\nnone\n\n\nstyle\n\n\nstyling for selected Item title\n\n\n\n\n\n\ntabStyle\n\n\ninherited\n\n\nstyle\n\n\nstyling for tab\n\n\n\n\n\n\nselected\n\n\nnone\n\n\nboolean\n\n\nreturn whether the item is selected\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction\n\n\nonPress method for Item\n\n\n\n\n\n\nallowFontScaling\n\n\nfalse\n\n\nboolean\n\n\nallow font scaling for title\n\n\n\n\n\n\n\n\n\n\nFor issues or feature requests related to Tab Bar component please click \nhere", 
            "title": "Tabbar"
        }, 
        {
            "location": "/API/tabbar/#hide-tab-bar", 
            "text": "constructor   ()   { \n   super () \n   this . state   =   { \n     hideTabBar :   true , \n   }  }  hideTabBar ( value )   { \n   this . setState ({ \n     hideTabBar :   value \n   });  }  let   tabBarStyle   =   {};  let   sceneStyle   =   {};  if   ( this . state . hideTabBar )   { \n   tabBarStyle . height   =   0 ; \n   tabBarStyle . overflow   =   hidden ; \n   sceneStyle . paddingBottom   =   0 ;  }  Tabs   hidesTabTouch   tabBarStyle = { tabBarStyle }   sceneStyle = { sceneStyle } \n   Tab \n     LoginView   hideTabBar = { this . hideTabBar . bind ( this )}   / \n   /Tab \n   /* ... tabs here */  /Tabs", 
            "title": "Hide Tab Bar"
        }, 
        {
            "location": "/API/tabbar/#tabs-props", 
            "text": "prop  default  type  description      sceneStyle  inherited  object (style)  define for rendered scene    tabBarStyle  inherited  object (style)  define style for TabBar    tabBarShadowStyle  inherited  object (style)  define shadow style for tabBar    hidesTabTouch  false  boolean  disable onPress opacity for Tab", 
            "title": "Tabs Props"
        }, 
        {
            "location": "/API/tabbar/#tab-props", 
            "text": "prop  default  type  description      renderIcon  none  function  returns Item icon    renderSelectedIcon  none  function  returns selected Item icon    badgeText  none  string or number  text for Item badge    renderBadge  none  function  returns Item badge    title  none  string  Item title    titleStyle  inherited  style  styling for Item title    selectedTitleStyle  none  style  styling for selected Item title    tabStyle  inherited  style  styling for tab    selected  none  boolean  return whether the item is selected    onPress  none  function  onPress method for Item    allowFontScaling  false  boolean  allow font scaling for title      For issues or feature requests related to Tab Bar component please click  here", 
            "title": "Tab Props"
        }, 
        {
            "location": "/API/tile/", 
            "text": "A component with full size image and with text either inside the image or under the image along with customizable caption\n\n\n\n\nThis component was inspired from \nShoutem UI\n by \nShoutem\n. Check out \nShoutem\n if you haven't already!\n\n\n\n\nFeatured Tile\n\n\n\n\nTile\n\n   \nimageSrc\n=\n{{\nrequire\n:\n \n(\n./img/path\n)}}\n\n   \ntitle\n=\nLorem ipsum dolor sit amet, consectetur adipisicing elit. Dolores dolore exercitationem\n\n   \nfeatured\n\n   \ncaption\n=\nSome Caption Text\n\n\n/\n\n\n\n\n\n\nFeatured Tile with Icon\n\n\n\n\nTile\n\n  \nimageSrc\n=\n{{\nrequire\n:\n \n(\n./img/path\n)}}\n\n  \nicon\n=\n{{\nname\n:\n \nplay-circle\n,\n \ntype\n:\n \nfont-awesome\n}}\n\n  \nfeatured\n\n\n/\n\n\n\n\n\n\nTile with Icon\n\n\n\n\nTile\n\n  \nimageSrc\n=\n{{\nrequire\n:\n \n(\n./img/path\n)}}\n\n  \ntitle\n=\nLorem ipsum dolor sit amet, consectetur\n\n  \nicon\n=\n{{\nname\n:\n \nplay-circle\n,\n \ntype\n:\n \nfont-awesome\n}}\n  \n// optional\n\n  \ncontentContainerStyle\n=\n{{\nheight\n:\n \n70\n}}\n\n\n\n  \nView\n \nstyle\n=\n{{\nflex\n:\n \n1\n,\n \nflexDirection\n:\n \nrow\n,\n \njustifyContent\n:\n \nspace-between\n}}\n\n    \nText\nCaption\n/Text\n\n    \nText\nCaption\n/Text\n\n  \n/View\n\n\n/Tile\n\n\n\n\n\n\nTile Props\n\n\n\n\n\n\n\n\nprop\n\n\ndefault\n\n\ntype\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nicon\n\n\nnone\n\n\nobject {name: string, color: string, size: number, type: string (default is material, or choose one of material-community, simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo), iconStyle: object(style)}\n\n\nIcon Component Props (optional)\n\n\n\n\n\n\niconContainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nStyling for the outer icon container (optional)\n\n\n\n\n\n\ntitle\n\n\nnone\n\n\nstring\n\n\nText inside the tile (optional)\n\n\n\n\n\n\ntitleStyle\n\n\nnone\n\n\nobject (style)\n\n\nStyling for the title (optional)\n\n\n\n\n\n\ncaption\n\n\nnone\n\n\nstring\n\n\nText inside the tilt when tile is featured\n\n\n\n\n\n\ncaptionStyle\n\n\nnone\n\n\nobject (style)\n\n\nStyling for the caption (optional)\n\n\n\n\n\n\nfeatured\n\n\nfalse\n\n\nboolean\n\n\nChanges the look of the tile (optional)\n\n\n\n\n\n\ncontainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nStyling for the outer tile container (optional)\n\n\n\n\n\n\nimageSrc\n\n\nnone\n\n\nobject (image)\n\n\nSource for the image (required)\n\n\n\n\n\n\nimageContainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nStyling for the image (optional)\n\n\n\n\n\n\nonPress\n\n\nnone\n\n\nfunction (event)\n\n\nFunction to call when tile is pressed (optional)\n\n\n\n\n\n\nactiveOpacity\n\n\n0.2\n\n\nnumber\n\n\nNumber passed to control opacity on press (optional)\n\n\n\n\n\n\ncontentContainerStyle\n\n\nnone\n\n\nobject (style)\n\n\nStyling for bottom container when not featured tile (optional)\n\n\n\n\n\n\nwidth\n\n\nDevice Width\n\n\nnumber\n\n\nWidth for the tile (optional)\n\n\n\n\n\n\nheight\n\n\nDevice Width * 0.8\n\n\nnumber\n\n\nHeight for the tile", 
            "title": "Tile"
        }, 
        {
            "location": "/API/tile/#featured-tile", 
            "text": "Tile \n    imageSrc = {{ require :   ( ./img/path )}} \n    title = Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolores dolore exercitationem \n    featured \n    caption = Some Caption Text  /", 
            "title": "Featured Tile"
        }, 
        {
            "location": "/API/tile/#featured-tile-with-icon", 
            "text": "Tile \n   imageSrc = {{ require :   ( ./img/path )}} \n   icon = {{ name :   play-circle ,   type :   font-awesome }} \n   featured  /", 
            "title": "Featured Tile with Icon"
        }, 
        {
            "location": "/API/tile/#tile-with-icon", 
            "text": "Tile \n   imageSrc = {{ require :   ( ./img/path )}} \n   title = Lorem ipsum dolor sit amet, consectetur \n   icon = {{ name :   play-circle ,   type :   font-awesome }}    // optional \n   contentContainerStyle = {{ height :   70 }}  \n   View   style = {{ flex :   1 ,   flexDirection :   row ,   justifyContent :   space-between }} \n     Text Caption /Text \n     Text Caption /Text \n   /View  /Tile", 
            "title": "Tile with Icon"
        }, 
        {
            "location": "/API/tile/#tile-props", 
            "text": "prop  default  type  description      icon  none  object {name: string, color: string, size: number, type: string (default is material, or choose one of material-community, simple-line-icon, zocial, font-awesome, octicon, ionicon, foundation, evilicon, or entypo), iconStyle: object(style)}  Icon Component Props (optional)    iconContainerStyle  none  object (style)  Styling for the outer icon container (optional)    title  none  string  Text inside the tile (optional)    titleStyle  none  object (style)  Styling for the title (optional)    caption  none  string  Text inside the tilt when tile is featured    captionStyle  none  object (style)  Styling for the caption (optional)    featured  false  boolean  Changes the look of the tile (optional)    containerStyle  none  object (style)  Styling for the outer tile container (optional)    imageSrc  none  object (image)  Source for the image (required)    imageContainerStyle  none  object (style)  Styling for the image (optional)    onPress  none  function (event)  Function to call when tile is pressed (optional)    activeOpacity  0.2  number  Number passed to control opacity on press (optional)    contentContainerStyle  none  object (style)  Styling for bottom container when not featured tile (optional)    width  Device Width  number  Width for the tile (optional)    height  Device Width * 0.8  number  Height for the tile", 
            "title": "Tile Props"
        }, 
        {
            "location": "/Installation/default_installation/", 
            "text": "Default Installation instructions\n\n\nIf your project is a standard React Native project created using \nreact-native init\n (it should have an ios/android directory), then follow these installation instructions:\n\n\nStep 1: Install react-native-vector-icons\n\n\nIf you already have this installed, or are using create-react-native-app, this isn't necessary.\n\n\nnpm i react-native-vector-icons --save \n react-native link react-native-vector-icons\n\n\nIf you have any issues with icons not working or installation of React Native Vector Icons, check out their installation guide \nhere\n\n\nStep 2: Install react-native-elements\n\n\nyarn add react-native-elements\n\n\n\n\n\nor\n\n\nnpm i react-native-elements --save", 
            "title": "Default installation"
        }, 
        {
            "location": "/Installation/default_installation/#default-installation-instructions", 
            "text": "If your project is a standard React Native project created using  react-native init  (it should have an ios/android directory), then follow these installation instructions:", 
            "title": "Default Installation instructions"
        }, 
        {
            "location": "/Installation/default_installation/#step-1-install-react-native-vector-icons", 
            "text": "If you already have this installed, or are using create-react-native-app, this isn't necessary.  npm i react-native-vector-icons --save   react-native link react-native-vector-icons  If you have any issues with icons not working or installation of React Native Vector Icons, check out their installation guide  here", 
            "title": "Step 1: Install react-native-vector-icons"
        }, 
        {
            "location": "/Installation/default_installation/#step-2-install-react-native-elements", 
            "text": "yarn add react-native-elements  or  npm i react-native-elements --save", 
            "title": "Step 2: Install react-native-elements"
        }, 
        {
            "location": "/Installation/using-with-crna-or-expo/", 
            "text": "Installation with create-react-native-app or Expo\n\n\nIf you are using\n\ncreate-react-native-app\n\nor \nExpo\n, follow these instructions:\n\n\nStep 1: install the package\n\n\nCreate React Native App\n and \nExpo\n projects include react-native-vector-icons out of the box, so all you need to do\nis install react-native-elements.\n\n\nyarn add react-native-elements\n\n\n\nor\n\n\nnpm install react-native-elements", 
            "title": "Using with crna or expo"
        }, 
        {
            "location": "/Installation/using-with-crna-or-expo/#installation-with-create-react-native-app-or-expo", 
            "text": "If you are using create-react-native-app \nor  Expo , follow these instructions:", 
            "title": "Installation with create-react-native-app or Expo"
        }, 
        {
            "location": "/Installation/using-with-crna-or-expo/#step-1-install-the-package", 
            "text": "Create React Native App  and  Expo  projects include react-native-vector-icons out of the box, so all you need to do\nis install react-native-elements.  yarn add react-native-elements \n\nor  npm install react-native-elements", 
            "title": "Step 1: install the package"
        }
    ]
}